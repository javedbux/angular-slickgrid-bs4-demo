{"version":3,"sources":["webpack:///./src/app/examples/home.component.html","webpack:///./src/app/examples/grid-editor.component.html","webpack:///./src/app/examples/grid-remote.component.html","webpack:///./src/app/examples/grid-state.component.html","webpack:///./src/app/examples/grid-rowmove.component.html","webpack:///./src/app/examples/grid-basic.component.html","webpack:///./src/app/examples/swt-common-grid-test.component.html","webpack:///./src/app/examples/grid-additem.component.html","webpack:///./src/app/examples/grid-localization.component.html","webpack:///./src/app/examples/grid-clientside.component.html","webpack:///./src/app/examples/grid-headermenu.component.html","webpack:///./node_modules/moment-mini/locale sync ^\\.\\/.*$","webpack:///./node_modules/flatpickr/dist/l10n sync ^\\.\\/.*\\.js$","webpack:///./src/app/examples/grid-menu.component.html","webpack:///./src/app/examples/grid-grouping.component.html","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/examples/grid-odata.component.html","webpack:///./src/app/examples/grid-formatter.component.html","webpack:///./src/app/examples/grid-rowselection.component.html","webpack:///./src/app/examples/grid-frozen.component.html","webpack:///./src/app/examples/grid-graphql.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/examples/grid-headerbutton.component.html","webpack:///./src/app/examples/grid-colspan.component.html","webpack:///./src/app/examples/grid-frozen.component.scss","webpack:///./src/app/examples/grid-draggrouping.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/examples/grid-additem.component.ts","webpack:///./src/app/examples/grid-menu.component.ts","webpack:///./src/app/examples/grid-basic.component.ts","webpack:///./src/app/examples/custom-inputFilter.ts","webpack:///./src/app/examples/grid-clientside.component.ts","webpack:///./src/app/examples/grid-colspan.component.ts","webpack:///./src/app/examples/grid-draggrouping.component.ts","webpack:///./src/app/examples/custom-inputEditor.ts","webpack:///./src/app/examples/grid-editor.component.ts","webpack:///./src/app/examples/grid-formatter.component.ts","webpack:///./src/app/examples/grid-frozen.component.ts","webpack:///./src/app/examples/grid-grouping.component.ts","webpack:///./src/app/examples/grid-headerbutton.component.ts","webpack:///./src/app/examples/grid-headermenu.component.ts","webpack:///./src/app/examples/grid-localization.component.ts","webpack:///./src/app/examples/grid-odata.component.ts","webpack:///./src/app/examples/grid-graphql.component.ts","webpack:///./src/app/examples/grid-remote.component.ts","webpack:///./src/app/examples/grid-rowmove.component.ts","webpack:///./src/app/examples/grid-rowselection.component.ts","webpack:///./src/app/examples/grid-state.component.ts","webpack:///./src/app/examples/swt-logger.service.ts","webpack:///./src/app/examples/home.component.ts","webpack:///./src/app/examples/swt-common-grid.component.ts","webpack:///./src/app/examples/swt-common-grid-pagination.component.ts","webpack:///./src/app/examples/swt-common-grid-test.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["module","exports","map","./locale","./locale.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","./ar.js","./at.js","./be.js","./bg.js","./bn.js","./cat.js","./cs.js","./cy.js","./da.js","./de.js","./default.js","./eo.js","./es.js","./et.js","./fa.js","./fi.js","./fr.js","./gr.js","./he.js","./hi.js","./hr.js","./hu.js","./id.js","./index.js","./it.js","./ja.js","./km.js","./ko.js","./kz.js","./lt.js","./lv.js","./mk.js","./mn.js","./ms.js","./my.js","./nl.js","./no.js","./pa.js","./pl.js","./pt.js","./ro.js","./ru.js","./si.js","./sk.js","./sl.js","./sq.js","./sr.js","./sv.js","./th.js","./tr.js","./uk.js","./vn.js","./zh.js","webpackEmptyAsyncContext","Promise","then","grid_additem_component_GridAddItemComponent","GridAddItemComponent","this","title","subTitle","prototype","angularGridReady","angularGrid","dataView","grid","slickGrid","gridService","ngOnInit","columnDefinitions","name","field","sortable","type","angular_slickgrid","string","editor","model","longText","number","text","onCellChange","args","alert","console","log","formatter","percentCompleteBar","integer","dateIso","date","checkmark","checkbox","gridOptions","asyncEditorLoading","autoResize","containerId","sidePadding","editable","enableColumnPicker","enableCellNavigation","enableRowSelection","mockedDataset","i","randomYear","Math","floor","random","randomMonth","randomDay","randomPercent","round","duration","percentComplete","percentCompleteNumber","start","Date","finish","effortDriven","dataset","addNewItem","newId","length","newItem","addItemToDatagrid","highlighFifthRow","highlightRow","changeDurationBackgroundColor","getItemMetadata","updateItemMetadataForDurationOver50","invalidate","render","previousItemMetadata","_this","rowNumber","item","getItem","meta","cssClasses","updateSecondItem","updatedItem","getDataItemByRowNumber","updateDataGridItem","tslib_es6","core","encapsulation","None","template","grid_menu_component_GridMenuComponent","GridMenuComponent","translate","selectedLanguage","getDefaultLang","headerKey","filterable","filter","compoundSlider","params","hideSliderNumber","maxWidth","boolean","minWidth","collection","value","label","singleSelect","visibleColumns","columnPicker","hideForceFitButton","hideSyncResizeButton","onColumnsChanged","columns","enableAutoResize","enableGridMenu","enableFiltering","gridMenu","customTitleKey","iconCssClass","hideToggleFilterCommand","menuWidth","resizeOnShowHeaderRow","customItems","titleKey","disabled","command","positionOrder","onCommand","enableTranslate","i18n","getData","mockDataset","switchLanguage","use","ngx_translate_core","grid_basic_component_GridBasicComponent","GridBasicComponent","columnDefinitions1","gridOptions1","enableSorting","columnDefinitions2","gridOptions2","dataset1","mockData","dataset2","custom_inputFilter_CustomInputFilter","CustomInputFilter","operator","equal","init","callback","columnDef","searchTerms","searchTerm","Array","isArray","filterTemplate","buildTemplateHtmlString","$filterElm","createDomElement","keyup","clear","val","trigger","destroy","off","remove","setValues","values","$headerElm","getHeaderRowColumn","$","empty","attr","data","appendTo","randomBetween","min","max","grid_clientside_component_GridClientSideComponent","GridClientSideComponent","http","compoundInput","exportCsvForceToKeepAsString","collectionAsync","get","collectionFilterBy","property","notEqual","collectionSortBy","sortDesc","fieldType","customStructure","labelSuffix","collectionOptions","separatorBetweenTextLabels","multipleSelect","filterOptions","maxHeight","width","exportWithFormatter","compoundDate","dateUsShort","dateTimeIsoAmPm","dateUtc","outputType","multiple","formatters","complexObject","isEffort","autoDropWidth","enableExcelCopyBuffer","presets","filters","columnId","sorters","direction","itemCount","startingIndex","tempDataset","randomDuration","randomYearShort","randomMonthStr","randomHour","randomTime","randomIsEffort","push","description","usDateShort","utcDate","gridStateChanged","gridState","saveCurrentGridState","gridStateService","getCurrentGridState","refreshStatistics","current","setTimeout","statistics","startTime","totalItemCount","fesm5_http","grid_colspan_component_GridColspanComponent","GridColspanComponent","columnGroup","selectable","enableColumnReorder","createPreHeaderPanel","showPreHeaderPanel","preHeaderPanelHeight","explicitInitialization","colspanCallback","renderDifferentColspan","colspan","0","grid_draggrouping_component_GridDraggableGroupingComponent","GridDraggableGroupingComponent","durationOrderByCount","processing","selectedGroupingFields","loadData","defineGrid","gridObj","dataviewObj","cssClass","grouping","getter","g","count","aggregators","Sum","aggregateCollapsed","collapsed","slider","groupTotalsFormatter","sumTotals","comparer","a","b","numeric","asc","avgTotalsPercentage","groupFormatterPrefix","dollar","sumTotalsDollar","enableDraggableGrouping","exportOptions","sanitizeDataExport","clearGrouping","draggableGrouping","dropPlaceHolderText","deleteIconCssClass","onGroupChanged","groupColumns","onExtensionRegistered","extension","draggableGroupingPlugin","rowCount","num","cost","clearGroupsAndSelects","forEach","setDroppedGroups","clearDroppedGroups","collapseAllGroups","expandAllGroups","groupByDuration","showPreHeader","groupByDurationOrderByCount","isOrderingByCount","groupByDurationEffortDriven","groupByFieldName","fieldName","index","groupedFields","groups","setPreHeaderPanelVisibility","selectTrackByFn","toggleDraggableGroupingRow","getOptions","custom_inputEditor_CustomInputEditor","CustomInputEditor","$input","container","on","keyCode","LEFT","RIGHT","stopImmediatePropagation","focus","select","getValue","setValue","loadValue","defaultValue","column","serializeValue","applyValue","state","isValueChanged","validate","validator","validationResults","valid","msg","myCustomTitleValidator","internalColumnEditor","undefined","test","taskFormatter","row","cell","dataContext","join","grid_editor_component_GridEditorComponent","GridEditorComponent","_commandQueue","isAutoEdit","prepareGrid","excludeFromHeaderMenu","editIcon","onCellClick","alertWarning","setSelectedRow","deleteIcon","placeholder","minValue","maxValue","enableRenderHtml","from","k","symbol","elementOptions","collectionEditor","autoComplete","editorOptions","minLength","source","request","response","ajax","url","dataType","q","term","success","dataKey","labelKey","object","labelPrefix","inContains","autoEdit","autoCommitEdit","editCommandHandler","editCommand","execute","addItem","lastRowIndex","newRows","requisiteColumnDef","find","filterCollectionAsync","editorCollection","prefix","Subject","next","deleteItem","filterCollection","selectCollectionObj","sortCollectionDescending","pop","deleteDataGridItemById","sort","item1","item2","prerequisites","countryOfOrigin","cityOfOrigin","onCellChanged","updatedObject","onCellClicked","metadata","getColumnFromEventArguments","confirm","onCellValidation","changeAutoCommit","setOptions","setAutoEdit","undo","Slick","GlobalEditorLock","cancelCurrentEdit","gotoCell","grid_formatter_component_myCustomCheckmarkFormatter","grid_formatter_component_GridFormatterComponent","GridFormatterComponent","mask","progressBar","phone","generatePhoneNumber","percentComplete2","grid_frozen_component_GridFrozenComponent","GridFrozenComponent","frozenColumnCount","frozenRowCount","isFrozenBottom","prepareDataGrid","cannotTriggerInsert","resizable","unselectable","alwaysShowVerticalScroll","forceFitColumns","frozenColumn","frozenRow","showHeaderRow","syncColumnCellResize","title1","title2","title3","title4","changeFrozenColumnCount","changeFrozenRowCount","toggleFrozenBottomRows","frozenBottom","grid_grouping_component_GridGroupingComponent","GridGroupingComponent","ngOnDestroy","exportBeforeSub","unsubscribe","exportAfterSub","focusable","enableGrouping","exportService","onGridBeforeExportToFile","subscribe","onGridAfterExportToFile","gridReady","dataviewReady","dataview","setGrouping","Avg","lazyTotalsCalculation","groupByDurationEffortDrivenPercent","columnsWithHighlightingById","highlightingFormatter","grid_headerbutton_component_GridHeaderButtonComponent","GridHeaderButtonComponent","enableHeaderButton","enableHeaderMenu","headerButton","button","tooltip","header","buttons","handler","showOnHover","d","j","grid_headermenu_component_GridHeaderMenuComponent","GridHeaderMenuComponent","menu","items","headerMenu","pluginService","hideColumn","autoResizeColumns","cols","sortService","getPreviousColumnSorts","sortCol","sortAsc","onLocalSortChanged","newSortColumns","col","setSortColumns","grid_localization_component_GridLocalizationComponent","GridLocalizationComponent","duplicateTitleHeaderCount","taskTranslateFormatter","instant","x","useFormatterOuputToFilter","exportCustomFormatter","translateBoolean","enableTranslateLabel","hideExportCsvCommand","hideExportTextDelimitedCommand","completedBool","completed","dynamicallyAddTitleHeader","newCol","slice","exportToFile","delimiter","comma","tab","filename","format","csv","txt","grid_odata_component_GridOdataComponent","GridOdataComponent","odataQuery","status","class","checkboxSelector","hideInFilterHeaderRow","hideInColumnTitleRow","enableCheckboxSelector","pagination","pageSizes","pageSize","totalItems","backendServiceApi","service","preProcess","displaySpinner","process","query","getCustomerApiCall","postProcess","getCustomerCallback","isProcessing","assign","getCustomerDataApiMock","reject","top","queryParams","toLowerCase","split","skip","orderBy","countTotalItems","columnFilters","_i","queryParams_1","param","includes","substring","filterBy","replace","filterMatch","match","trim","sampleDataRoot","firstRow","filteredData","hasOwnProperty","filterType","colId","indexOf","splitIds","filterTerm","endsWith","startsWith","updatedData","totalRecordCount","grid_graphql_component_GridGraphqlComponent","GridGraphqlComponent","graphqlQuery","isWithCursor","gridStateSub","contains","DESC","pageNumber","options","getBackendOptions","result","onGridStateChanged","withCursor","datasetName","addLocaleIntoQuery","extraQueryArguments","keepArgumentFieldDoubleQuotes","mockedResult","_a","nodes","pageInfo","hasNextPage","totalCount","timestamps","endTime","executionTime","backendService","buildQuery","brandFormatter","brand","mpnFormatter","link","octopart_url","mpn","grid_remote_component_GridRemoteComponent","GridRemoteComponent","_eventHandler","EventHandler","loading","search","loaderDataView","Data","RemoteModel","customDataView","setSort","setSortColumn","onViewportChanged","notify","unsubscribeAll","hookAllLoaderEvents","setSearch","multiColumnSort","onDataLoading","onDataLoaded","invalidateRow","updateRowCount","to","onSort","getViewport","ensureData","vp","bottom","searchChanged","newValue","grid_rowmove_component_GridRowMoveComponent","GridRowMoveComponent","behavior","excludeFromExport","enableRowMoveManager","rowMoveManager","onBeforeMoveRows","onBeforeMoveRow","onMoveRows","rows","insertBefore","stopPropagation","left","right","extractedRows","reverse","splice","concat","selectedRows","resetActiveCell","setData","setSelectedRows","grid_rowselection_component_GridRowSelectionComponent","GridRowSelectionComponent","angularGridReady1","angularGrid1","gridObj1","angularGridReady2","angularGrid2","gridObj2","hideSelectAllCheckbox","rowSelectionOptions","selectActiveRow","preselectedRows","prepareData","handleSelectedRowsChanged1","selectedTitle","idx","getDataItem","handleSelectedRowsChanged2","selectedTitles","grid_state_component_randomBetween","LoggerLevel","grid_state_component_GridStateComponent","GridStateComponent","JSON","parse","localStorage","clearGridStateFromLocalStorage","resetGrid","gridStatePresets","multiSelectFilterArray","input","etc","gridStateChanges","stringify","useDefaultPresets","home_component_HomeComponent","HomeComponent","swt_logger_service_Logger","Logger","_class","_clientLogLevel","INFO","_serverLogLevel","OFF","_isIE","level","serverLogLevel","serverLoggingUrl","navigator","userAgent","trace","message","additional","arguments","_log","TRACE","debug","DEBUG","info","LOG","warn","WARN","error","ERROR","_timestamp","toISOString","_logOnServer","headers","set","post","Levels","timestamp","res","_logIE","apply","logOnServer","color","_getColor","timer","swt_common_grid_pagination_component_SwtCommonGridPaginationComponent","SwtCommonGridPaginationComponent","httpClient","logger","pageCount","realPagination","defineProperty","_gridPaginationOptions","gridPaginationOptions","commonGrid","changeToFirstPage","event","onPageChanged","changeToLastPage","changeToNextPage","changeToPreviousPage","changeToCurrentPage","currentTarget","processOnPaginationChanged","newPage","selector","swt_common_grid_component_SwtCommonGridComponent","SwtCommonGridComponent","el","renderer","defaultPageSize","gridHeight","gridWidth","isMultiSelect","onFilterChanged_","onPaginationChanged_","onSortChanged_","sortedGridColumn","currentPage","filteredGridColumns","_onRowDoubleClick","Function","_onRowClick","rowHeight","enableAutoTooltip","enablePagination","_paginationComponent","angularSlickGrid","createBackendApiInternalPostProcessCallback","ngAfterViewInit","CustomGrid","columnData","metaData","rowData","dataelement","heading","setColumns","showPagination","CommonGrid","columnsData","lockedColumnCount","uniqueColumn","baseURL","programId","componentId","enableRenders","colValidationMap","checkHeader","cboLinked","rawData","dataProvider","idObj","key","content","paginationComponent","size","serviceOptions","resetPaginationOptions","updateOptions","processOnFilterChanged","timing","clearTimeout","emit","processOnSortChanged","sortDirection","sortCols","getFilteredGridColumns","getSortedGridColumn","_selectedRow","swt_common_grid_test_component_SwtCommonGridTestComponent","SwtCommonGridTestComponent","viewContainerRef","componentFactoryResolver","testurl","currentUrl","commonGridPag","data_sample","pagination_samples","gridData","maxpage","filterChanged","updateGridData","paginationChanged","sortChanged","visible","currency","amount","inputDate","inputTime","hasNote","routes","path","component","redirectTo","pathMatch","app_routing_module_AppRoutingRoutingModule","AppRoutingRoutingModule","imports","router","forRoot","useHash","app_component_AppComponent","AppComponent","createTranslateLoader","ngx_translate_http_loader","appInitializerFactory","injector","common","setDefaultLang","err","app_module_AppModule","AppModule","declarations","platform_browser","fesm5_forms","loader","provide","useFactory","deps","providers","multi","bootstrap","platform_browser_dynamic","bootstrapModule","preserveWhitespaces","catch"],"mappings":"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","file":"main.b96adfffbf4dab34d876.js","sourcesContent":["module.exports = \"<div class=\\\"container\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container\\\">\\r\\n  <h2>{{title}}</h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n      <label>autoEdit setting</label>\\r\\n      <span id=\\\"radioAutoEdit\\\">\\r\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioTrue\\\">\\r\\n              <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioTrue\\\" checked [value]=\\\"isAutoEdit\\\" (change)=\\\"setAutoEdit(true)\\\"> ON (single-click)\\r\\n          </label>\\r\\n          <label class=\\\"radio-inline control-label\\\" for=\\\"radioFalse\\\">\\r\\n              <input type=\\\"radio\\\" name=\\\"inlineRadioOptions\\\" id=\\\"radioFalse\\\" [value]=\\\"isAutoEdit\\\" (change)=\\\"setAutoEdit(false)\\\"> OFF (double-click)\\r\\n          </label>\\r\\n      </span>\\r\\n      <div class=\\\"row col-sm-12\\\">\\r\\n        <span>\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"undo()\\\">\\r\\n                <i class=\\\"fa fa-undo\\\"></i>\\r\\n                Undo last edit(s)\\r\\n            </button>\\r\\n            <label class=\\\"checkbox-inline control-label\\\" for=\\\"autoCommitEdit\\\">\\r\\n                <input type=\\\"checkbox\\\" id=\\\"autoCommitEdit\\\" [value]=\\\"gridOptions.autoCommitEdit\\\" (click)=\\\"changeAutoCommit()\\\">\\r\\n                Auto Commit Edit\\r\\n              </label>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\" style=\\\"margin-top: 5px\\\">\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.filterService.clearFilters()\\\">Clear Filters</button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.sortService.clearSorting()\\\">Clear Sorting</button>\\r\\n          <button class=\\\"btn btn-sm btn-outline-info\\\" (click)=\\\"addItem()\\\" title=\\\"Clear Filters &amp; Sorting to see it better\\\">Add item</button>\\r\\n          <button class=\\\"btn btn-sm btn-outline-danger\\\" (click)=\\\"deleteItem()\\\">Delete item</button>\\r\\n      </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-6\\\">\\r\\n      <div class=\\\"alert alert-info\\\" *ngIf=\\\"updatedObject\\\">\\r\\n          <strong>Updated Item:</strong> {{updatedObject | json}}\\r\\n      </div>\\r\\n      <div class=\\\"alert alert-warning\\\" *ngIf=\\\"alertWarning\\\">\\r\\n          <strong>Updated Item:</strong> {{alertWarning}}\\r\\n      </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n      <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n          (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n          (sgOnCellChange)=\\\"onCellChanged($event.detail.eventData, $event.detail.args)\\\"\\r\\n          (sgOnClick)=\\\"onCellClicked($event.detail.eventData, $event.detail.args)\\\"\\r\\n          (sgOnValidationError)=\\\"onCellValidation($event.detail.eventData, $event.detail.args)\\\"\\r\\n          [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\" [dataset]=\\\"dataset\\\">\\r\\n      </angular-slickgrid>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n    <h2>{{title}}</h2>\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n    <div class=\\\"col-md-6\\\" style=\\\"margin-bottom: 15px\\\">\\n            <label>Octopart Catalog Search <small>(type a word then press ENTER)</small></label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [value]=\\\"search\\\" (change)=\\\"searchChanged($event.target.value)\\\">\\n    </div>\\n\\n    <div class=\\\"alert alert-warning col-md-6\\\"\\n        role=\\\"alert\\\"\\n        *ngIf=\\\"loading\\\">\\n        <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\n        <span>Loading...</span>\\n    </div>\\n\\n    <angular-slickgrid\\n        gridId=\\\"grid18\\\"\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\n        [gridOptions]=\\\"gridOptions\\\"\\n        [dataset]=\\\"dataset\\\"\\n        [customDataView]=\\\"customDataView\\\"\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\n        (sgOnViewportChanged)=\\\"onViewportChanged($event.detail.eventData, $event.detail.args)\\\"\\n        (sgOnSort)=\\\"onSort($event.detail.eventData, $event.detail.args)\\\">\\n    </angular-slickgrid>\\n  </div>\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"clearGridStateFromLocalStorage()\\\">\\r\\n        <i class=\\\"fa fa-times\\\"></i>\\r\\n        Clear Grid State from Local Storage &amp; Reset Grid\\r\\n    </button>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid16\\\"\\r\\n              [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n              [gridOptions]=\\\"gridOptions\\\"\\r\\n              [dataset]=\\\"dataset\\\"\\r\\n              (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n              (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n              (onBeforeGridDestroy)=\\\"saveCurrentGridState($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n\"","module.exports = \"\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\n    <h2>{{title}}</h2>\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\n\\n    <angular-slickgrid gridId=\\\"grid17\\\"\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\n        [gridOptions]=\\\"gridOptions\\\"\\n        [dataset]=\\\"dataset\\\">\\n    </angular-slickgrid>\\n</div>\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <h3>Grid 1</h3>\\r\\n    <angular-slickgrid gridId=\\\"grid1\\\"\\r\\n                [columnDefinitions]=\\\"columnDefinitions1\\\"\\r\\n                [gridOptions]=\\\"gridOptions1\\\"\\r\\n                [dataset]=\\\"dataset1\\\"\\r\\n                gridHeight=\\\"300\\\"\\r\\n                gridWidth=\\\"800\\\">\\r\\n    </angular-slickgrid>\\r\\n\\r\\n    <hr/>\\r\\n\\r\\n    <h3>Grid 2</h3>\\r\\n    <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n                [columnDefinitions]=\\\"columnDefinitions2\\\"\\r\\n                [gridOptions]=\\\"gridOptions2\\\"\\r\\n                [dataset]=\\\"dataset2\\\"\\r\\n                gridHeight=\\\"300\\\"\\r\\n                gridWidth=\\\"800\\\">\\r\\n    </angular-slickgrid>\\r\\n</div>\\r\\n\\r\\n\"","module.exports = \"\\r\\n<div class=\\\"container\\\" style=\\\"margin-top: 10px\\\">\\r\\n\\t<div class=\\\"col-sm-8\\\">\\r\\n\\t\\t<div class=\\\"alert alert-info\\\">\\r\\n\\t\\t\\t<strong>Custom Pagination URL:</strong>\\r\\n\\t\\t\\t<div [innerHTML]=\\\"currentUrl\\\"></div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<swt-common-grid-pagination #commonGridPag1></swt-common-grid-pagination>\\r\\n\\t<swt-common-grid #commonGrid1\\r\\n\\t\\t\\t(onFilterChanged)=\\\"filterChanged($event)\\\"\\r\\n\\t\\t\\t(onPaginationChanged)=\\\"paginationChanged($event)\\\"\\r\\n\\t\\t\\t(onSortChanged)=\\\"sortChanged($event)\\\"></swt-common-grid>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <span>\\r\\n            <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"addNewItem()\\\">Add New Mocked Item</button>\\r\\n            <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"updateSecondItem()\\\">Update 2nd Row Item with Random Duration</button>\\r\\n            <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"highlighFifthRow()\\\">Highlight 5th Row</button>\\r\\n            <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"changeDurationBackgroundColor()\\\">Highlight Rows with Duration over 50</button>\\r\\n        </span>\\r\\n        <hr/>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <angular-slickgrid gridId=\\\"grid2\\\" [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\" [dataset]=\\\"dataset\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n        </angular-slickgrid>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <hr/>\\r\\n\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"switchLanguage()\\\">\\r\\n            <i class=\\\"fa fa-language\\\"></i>\\r\\n            Switch Language\\r\\n        </button>\\r\\n        <b>Locale:</b> <span style=\\\"font-style: italic\\\">{{selectedLanguage + '.json'}}</span>\\r\\n\\r\\n        <span style=\\\"margin-left: 20px\\\">\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"exportToFile('csv')\\\">\\r\\n                <i class=\\\"fa fa-download\\\"></i>\\r\\n                Download to CSV\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"exportToFile('txt')\\\">\\r\\n                <i class=\\\"fa fa-download\\\"></i>\\r\\n                Download to Text\\r\\n            </button>\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"dynamicallyAddTitleHeader()\\\">\\r\\n                <i class=\\\"fa fa-plus\\\"></i>\\r\\n                Dynamically Duplicate Title Column\\r\\n            </button>\\r\\n        </span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <angular-slickgrid gridId=\\\"grid12\\\"\\r\\n            (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n            [gridOptions]=\\\"gridOptions\\\"\\r\\n            [dataset]=\\\"dataset\\\">\\r\\n        </angular-slickgrid>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>{{title}}</h2>\\r\\n  <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <br/>\\r\\n  <span *ngIf=\\\"statistics\\\" style=\\\"margin-right: 10px\\\">\\r\\n      <b>Statistics:</b> {{statistics.startTime | date: 'yyyy-MM-dd HH:mm aaaaa\\\\'m\\\\''}} | {{statistics.itemCount}} of {{statistics.totalItemCount}} items\\r\\n  </span>\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.filterService.clearFilters()\\\">Clear Filters</button>\\r\\n  <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"angularGrid.sortService.clearSorting()\\\">Clear Sorting</button>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n            [gridOptions]=\\\"gridOptions\\\"\\r\\n            [dataset]=\\\"dataset\\\"\\r\\n            (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n            (onGridStateChanged)=\\\"gridStateChanged($event)\\\"\\r\\n            (onBeforeGridDestroy)=\\\"saveCurrentGridState($event)\\\"\\r\\n            (sgOnRowCountChanged)=\\\"refreshStatistics($event.detail.eventData, $event.detail.args)\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n            (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n            (onDataviewCreated)=\\\"dataviewReady($event)\\\"\\r\\n            (onGridCreated)=\\\"gridReady($event)\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n            [gridOptions]=\\\"gridOptions\\\"\\r\\n            [dataset]=\\\"dataset\\\">\\r\\n        </angular-slickgrid>\\r\\n    </div>\\r\\n</div>\\r\\n\"","var map = {\n\t\"./locale\": \"wCDk\",\n\t\"./locale.js\": \"wCDk\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"Lw2E\";","var map = {\n\t\"./ar.js\": \"+OV3\",\n\t\"./at.js\": \"Gt+8\",\n\t\"./be.js\": \"oAMl\",\n\t\"./bg.js\": \"9De2\",\n\t\"./bn.js\": \"6Cpa\",\n\t\"./cat.js\": \"/iph\",\n\t\"./cs.js\": \"EBSL\",\n\t\"./cy.js\": \"Ton7\",\n\t\"./da.js\": \"++FP\",\n\t\"./de.js\": \"Jt8t\",\n\t\"./default.js\": \"QM5T\",\n\t\"./eo.js\": \"V7ZE\",\n\t\"./es.js\": \"SYT2\",\n\t\"./et.js\": \"gRVh\",\n\t\"./fa.js\": \"eHtV\",\n\t\"./fi.js\": \"ewub\",\n\t\"./fr.js\": \"Aid2\",\n\t\"./gr.js\": \"W8vW\",\n\t\"./he.js\": \"QhH9\",\n\t\"./hi.js\": \"/v+a\",\n\t\"./hr.js\": \"j+gB\",\n\t\"./hu.js\": \"KV+S\",\n\t\"./id.js\": \"AixY\",\n\t\"./index.js\": \"y/pk\",\n\t\"./it.js\": \"rmDh\",\n\t\"./ja.js\": \"UMqg\",\n\t\"./km.js\": \"5Q0x\",\n\t\"./ko.js\": \"VEU4\",\n\t\"./kz.js\": \"0kzd\",\n\t\"./lt.js\": \"YLy/\",\n\t\"./lv.js\": \"18gA\",\n\t\"./mk.js\": \"31E+\",\n\t\"./mn.js\": \"5p1B\",\n\t\"./ms.js\": \"fvCo\",\n\t\"./my.js\": \"SEQC\",\n\t\"./nl.js\": \"3uVB\",\n\t\"./no.js\": \"uHQq\",\n\t\"./pa.js\": \"wGah\",\n\t\"./pl.js\": \"tXmi\",\n\t\"./pt.js\": \"Io36\",\n\t\"./ro.js\": \"ZV7w\",\n\t\"./ru.js\": \"b/zg\",\n\t\"./si.js\": \"fV5r\",\n\t\"./sk.js\": \"cntR\",\n\t\"./sl.js\": \"ks2o\",\n\t\"./sq.js\": \"JrQ3\",\n\t\"./sr.js\": \"DiE8\",\n\t\"./sv.js\": \"mNSI\",\n\t\"./th.js\": \"hSGY\",\n\t\"./tr.js\": \"+AxM\",\n\t\"./uk.js\": \"+zM+\",\n\t\"./vn.js\": \"yAt/\",\n\t\"./zh.js\": \"3BxJ\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"WqZd\";","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n            (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n            [gridOptions]=\\\"gridOptions\\\"\\r\\n            [dataset]=\\\"dataset\\\">\\r\\n        </angular-slickgrid>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n    \\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"loadData(500)\\\">\\r\\n            500 rows\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"loadData(50000)\\\">\\r\\n            50k rows\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"clearGrouping()\\\">\\r\\n            Clear grouping\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"collapseAllGroups()\\\">\\r\\n            Collapse all groups\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"expandAllGroups()\\\">\\r\\n            Expand all groups\\r\\n        </button>\\r\\n    </div>\\r\\n    <hr/>\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDuration()\\\">\\r\\n            Group by duration &amp; sort groups by value\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationOrderByCount(false)\\\">\\r\\n            Group by duration &amp; sort groups by count\\r\\n        </button>\\r\\n    </div>\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationOrderByCount(true)\\\">\\r\\n            Group by duration &amp; sort groups by count, aggregate collapsed\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationEffortDriven()\\\">\\r\\n            Group by duration then effort-driven\\r\\n        </button>\\r\\n        <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationEffortDrivenPercent()\\\">\\r\\n            Group by duration then effort-driven then percent.\\r\\n        </button>\\r\\n        <span [hidden]=\\\"!processing\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n        </span>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n        (onDataviewCreated)=\\\"dataviewReady($event)\\\"\\r\\n        (onGridCreated)=\\\"gridReady($event)\\\"\\r\\n        [dataset]=\\\"dataset\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n        [gridOptions]=\\\"gridOptions\\\">\\r\\n    </angular-slickgrid>\\r\\n</div>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n  <h2>{{title}}</h2>\\r\\n  <div class=\\\"subtitle row\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n      <div [class]=\\\"status.class\\\" role=\\\"alert\\\">\\r\\n        <strong>Status: </strong> {{status.text}}\\r\\n        <span [hidden]=\\\"!processing\\\">\\r\\n          <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n        </span>\\r\\n        <br/>\\r\\n      </div>\\r\\n      <span *ngIf=\\\"statistics\\\">\\r\\n          <b>Statistics:</b> {{statistics.endTime | date: 'yyyy-MM-dd HH:mm aaaaa\\\\'m\\\\''}} | {{statistics.executionTime}}ms | {{statistics.totalCount}} items\\r\\n      </span>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n      <div class=\\\"alert alert-info\\\">\\r\\n        <strong>OData Query:</strong> {{odataQuery}}\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <angular-slickgrid gridId=\\\"grid4\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n            [gridOptions]=\\\"gridOptions\\\"\\r\\n            [dataset]=\\\"dataset\\\">\\r\\n  </angular-slickgrid>\\r\\n</div>\\r\\n\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n              [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n              [gridOptions]=\\\"gridOptions\\\"\\r\\n              [dataset]=\\\"dataset\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-8\\\">\\r\\n          <div class=\\\"alert alert-success\\\">\\r\\n            <strong>(single select) Selected Row:</strong>\\r\\n            <span [innerHTML]=\\\"selectedTitle\\\"></span>\\r\\n          </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid1\\\"\\r\\n        gridHeight=\\\"200\\\"\\r\\n        gridWidth=\\\"800\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions1\\\"\\r\\n        [gridOptions]=\\\"gridOptions1\\\"\\r\\n        [dataset]=\\\"dataset1\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady1($event)\\\"\\r\\n        (sgOnSelectedRowsChanged)=\\\"handleSelectedRowsChanged1($event.detail.eventData, $event.detail.args)\\\">\\r\\n    </angular-slickgrid>\\r\\n\\r\\n    <hr>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-8\\\">\\r\\n          <div class=\\\"alert alert-success\\\">\\r\\n            <strong>(multi-select) Selected Row(s):</strong>\\r\\n            <span [innerHTML]=\\\"selectedTitles\\\"></span>\\r\\n          </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n        gridHeight=\\\"200\\\"\\r\\n        gridWidth=\\\"800\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions2\\\"\\r\\n        [gridOptions]=\\\"gridOptions2\\\"\\r\\n        [dataset]=\\\"dataset2\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady2($event)\\\"\\r\\n        (sgOnSelectedRowsChanged)=\\\"handleSelectedRowsChanged2($event.detail.eventData, $event.detail.args)\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n\"","module.exports = \"<div id=\\\"demo-container\\\" class=\\\"container\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <br>\\r\\n\\r\\n    <div class=\\\"row col-sm-12\\\">\\r\\n        <span>\\r\\n            <label for=\\\"\\\">Pinned Rows: </label>\\r\\n            <input type=\\\"number\\\" [(ngModel)]=\\\"frozenRowCount\\\">\\r\\n            <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"changeFrozenRowCount()\\\">\\r\\n                Set\\r\\n            </button>\\r\\n        </span>\\r\\n        <span style=\\\"margin-left: 10px\\\">\\r\\n            <label for=\\\"\\\">Pinned Columns: </label>\\r\\n            <input type=\\\"number\\\" [(ngModel)]=\\\"frozenColumnCount\\\">\\r\\n            <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"changeFrozenColumnCount()\\\">\\r\\n                Set\\r\\n            </button>\\r\\n        </span>\\r\\n        <span style=\\\"margin-left: 15px\\\">\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"toggleFrozenBottomRows()\\\">\\r\\n               <i class=\\\"fa fa-random fa-lg\\\"></i> Toggle Pinned Rows\\r\\n            </button>\\r\\n            <span style=\\\"font-weight: bold;\\\">: {{ isFrozenBottom ? 'Bottom' : 'Top' }}</span>\\r\\n        </span>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <hr>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid20\\\"\\r\\n              gridWidth=\\\"875\\\"\\r\\n              [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n              [gridOptions]=\\\"gridOptions\\\"\\r\\n              [dataset]=\\\"dataset\\\"\\r\\n              (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle row\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <div [class]=\\\"status.class\\\" role=\\\"alert\\\">\\r\\n                <strong>Status: </strong> {{status.text}}\\r\\n                <span [hidden]=\\\"!processing\\\">\\r\\n                    <i class=\\\"fa fa-refresh fa-spin fa-lg fa-fw\\\"></i>\\r\\n                </span>\\r\\n            </div>\\r\\n\\r\\n            <br/>\\r\\n\\r\\n            <button class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"switchLanguage()\\\">Switch Language</button>\\r\\n            <b>Locale:</b>\\r\\n            <span style=\\\"font-style: italic\\\">{{selectedLanguage + '.json'}}</span>\\r\\n            <br/>\\r\\n            <span *ngIf=\\\"statistics\\\">\\r\\n                <b>Statistics:</b> {{statistics.endTime | date: 'yyyy-MM-dd HH:mm aaaaa\\\\'m\\\\''}} | {{statistics.executionTime}}ms | {{statistics.totalCount}} items\\r\\n            </span>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-8\\\">\\r\\n            <div class=\\\"alert alert-info\\\">\\r\\n                <strong>GraphQL Query:</strong>\\r\\n                <div [innerHTML]=\\\"graphqlQuery\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid4\\\"\\r\\n        [gridHeight]=\\\"250\\\"\\r\\n        [gridWidth]=\\\"800\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n        [gridOptions]=\\\"gridOptions\\\"\\r\\n        [dataset]=\\\"dataset\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\"\\r\\n        (onBeforeGridDestroy)=\\\"saveCurrentGridState($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n</div>\\r\\n\"","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"https://github.com/ghiscoding/Angular-Slickgrid\\\">\\r\\n    <i class=\\\"fa fa-github\\\"></i>\\r\\n    <span>{{title}}</span>\\r\\n  </a>\\r\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarContent\\\" aria-controls=\\\"navbarContent\\\"\\r\\n    aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n\\r\\n  <div class=\\\"navbar-collapse collapse\\\" id=\\\"navbarContent\\\">\\r\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n      <li>\\r\\n        <span class=\\\"nav-link\\\" style=\\\"position: relative; top: 5px\\\">\\r\\n          <iframe allowtransparency=\\\"true\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" src=\\\"https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fghiscoding%2FAngular-Slickgrid&amp;aria-label=Star%20ghiscoding%2FAngular-Slickgrid%20on%20GitHub&amp;data-icon=octicon-star&amp;data-text=Star&amp;data-show-count=true\\\"\\r\\n            style=\\\"width: 90px; height: 20px; border: none;\\\"></iframe>\\r\\n        </span>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/home']\\\">\\r\\n          <i class=\\\"fa fa-lg fa-home\\\"></i> Home\\r\\n        </a>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</nav>\\r\\n\\r\\n<div class=\\\"page-host\\\">\\r\\n  <section class=\\\"au-animate side-menu\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-3 col-md-2 links\\\">\\r\\n        <ul class=\\\"well nav nav-pills nav-stacked\\\">\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/basic']\\\">1- Basic Grid / 2 Grids</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/formatter']\\\">2- Formatters</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/editor']\\\">3- Editors</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/clientside']\\\">4- Client Side Sort/Filter</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/odata']\\\">5- Backend Server with OData</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridgraphql']\\\">6- Backend Server with GraphQL</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/headerbutton']\\\">7- Header Button Plugin</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/headermenu']\\\">8- Header Menu Plugin</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridmenu']\\\">9- Grid Menu (hamburger menu)</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/selection']\\\">10- Row Selection / 2 Grids</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/additem']\\\">11- Add/Update/Highlight Datagrid Item</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/localization']\\\">12- Localization (i18n)</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/swt']\\\">13- Backend Server Custom Paging</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/grouping']\\\">14- Grouping &amp; Aggregator</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/colspan']\\\">15- Column Span</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/gridstate']\\\">16- Grid State &amp; Local Storage</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/rowmove']\\\">17- Row Move</a>\\r\\n          </li>\\r\\n          <li routerLinkActive=\\\"active\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/remote']\\\">18- Remote Model</a>\\r\\n          </li>\\r\\n          <li routerLinkActive=\\\"active\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/draggrouping']\\\">19- Draggable Grouping</a>\\r\\n          </li>\\r\\n          <li routerLinkActive=\\\"active\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]=\\\"['/frozen']\\\">20- Frozen Columns/Rows</a>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n\\r\\n      <div id=\\\"app-container\\\" class=\\\"col-sm-9 col-md-10\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n      </div>\\r\\n    </div>\\r\\n  </section>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <angular-slickgrid gridId=\\\"grid2\\\" (onDataviewCreated)=\\\"dataviewReady($event)\\\" (onGridCreated)=\\\"gridReady($event)\\\"\\r\\n            [columnDefinitions]=\\\"columnDefinitions\\\" [gridOptions]=\\\"gridOptions\\\" [dataset]=\\\"dataset\\\">\\r\\n        </angular-slickgrid>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\r\\n<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid2\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n        [gridOptions]=\\\"gridOptions\\\"\\r\\n        [dataset]=\\\"dataset\\\"\\r\\n        gridHeight=\\\"500\\\"\\r\\n        gridWidth=\\\"800\\\">\\r\\n    </angular-slickgrid>\\r\\n  </div>\\r\\n\"","module.exports = \"/** You can change the pinned/frozen border styling through this css override */\\n.slick-row .slick-cell.frozen:last-child,\\n.slick-headerrow-column.frozen:last-child,\\n.slick-footerrow-column.frozen:last-child {\\n  border-right: 1px solid #969696 !important; }\\n.slick-pane-bottom {\\n  border-top: 1px solid #969696 !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXhhbXBsZXMvQzpcXHNvdXJjZWNvZGVcXEdpdEh1YlxcYW5ndWxhci1zbGlja2dyaWQtYnM0LWRlbW8vc3JjXFxhcHBcXGV4YW1wbGVzXFxncmlkLWZyb3plbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnRkFBZ0Y7QUFFaEY7OztFQUdFLDJDQUEwQyxFQUMzQztBQUVEO0VBQ0UseUNBQXdDLEVBQ3pDIiwiZmlsZSI6InNyYy9hcHAvZXhhbXBsZXMvZ3JpZC1mcm96ZW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogWW91IGNhbiBjaGFuZ2UgdGhlIHBpbm5lZC9mcm96ZW4gYm9yZGVyIHN0eWxpbmcgdGhyb3VnaCB0aGlzIGNzcyBvdmVycmlkZSAqL1xyXG5cclxuLnNsaWNrLXJvdyAuc2xpY2stY2VsbC5mcm96ZW46bGFzdC1jaGlsZCxcclxuLnNsaWNrLWhlYWRlcnJvdy1jb2x1bW4uZnJvemVuOmxhc3QtY2hpbGQsXHJcbi5zbGljay1mb290ZXJyb3ctY29sdW1uLmZyb3plbjpsYXN0LWNoaWxkIHtcclxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjOTY5Njk2ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5zbGljay1wYW5lLWJvdHRvbSB7XHJcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5Njk2OTYgIWltcG9ydGFudDtcclxufVxyXG4iXX0= */\"","module.exports = \"<div id=\\\"demo-container\\\" class=\\\"container-fluid\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <div class=\\\"subtitle\\\" [innerHTML]=\\\"subTitle\\\"></div>\\r\\n\\r\\n    <form class=\\\"form-inline\\\">\\r\\n        <div class=\\\"row col-sm-12\\\">\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"loadData(500)\\\">\\r\\n            500 rows\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"loadData(50000)\\\">\\r\\n            50k rows\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"clearGroupsAndSelects()\\\">\\r\\n            Clear grouping\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"collapseAllGroups()\\\">\\r\\n            Collapse all groups\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"expandAllGroups()\\\">\\r\\n            Expand all groups\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"toggleDraggableGroupingRow()\\\">\\r\\n            Toggle Draggable Grouping Row\\r\\n          </button>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row col-sm-12\\\">\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationOrderByCount(false)\\\">\\r\\n            Group by duration &amp; sort groups by value\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationOrderByCount(true)\\\">\\r\\n            Group by duration &amp; sort groups by count\\r\\n          </button>\\r\\n          <button class=\\\"btn btn-outline-secondary btn-xs\\\" (click)=\\\"groupByDurationEffortDriven()\\\">\\r\\n            Group by Duration then Effort-Driven\\r\\n          </button>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n            <br>\\r\\n        </div>\\r\\n        <div class=\\\"row col-sm-12\\\">\\r\\n            <div class=\\\"form-row\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                  <label for=\\\"field1\\\" class=\\\"col-sm-3 mb-2\\\">Group by field(s)</label>\\r\\n                  <div class=\\\"form-group col-md-3\\\" *ngFor=\\\"let groupField of selectedGroupingFields; let i = index; trackBy: selectTrackByFn\\\">\\r\\n                      <select class=\\\"form-control\\\" name=\\\"groupField{{i}}\\\" [(ngModel)]=\\\"selectedGroupingFields[i]\\\" (ngModelChange)=\\\"groupByFieldName($event, i)\\\">\\r\\n                          <option value=\\\"\\\"></option>\\r\\n                          <option [ngValue]=\\\"field.id\\\" *ngFor=\\\"let field of columnDefinitions\\\">{{field.name}}</option>\\r\\n                      </select>\\r\\n                  </div>\\r\\n              </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <hr>\\r\\n    </div>\\r\\n\\r\\n    <angular-slickgrid gridId=\\\"grid19\\\"\\r\\n        [dataset]=\\\"dataset\\\"\\r\\n        [columnDefinitions]=\\\"columnDefinitions\\\"\\r\\n        [gridOptions]=\\\"gridOptions\\\"\\r\\n        (onAngularGridCreated)=\\\"angularGridReady($event)\\\">\\r\\n    </angular-slickgrid>\\r\\n</div>\\r\\n\"","module.exports = \".body-content {\\n  margin-top: 58px; }\\n\\n.red {\\n  color: red; }\\n\\n.faded {\\n  opacity: 0.2; }\\n\\n.faded:hover {\\n  opacity: 0.5; }\\n\\n.links {\\n  background-color: #f9f9f9;\\n  border-right: 1px solid #d0d0d0;\\n  overflow-y: auto;\\n  padding-top: 10px;\\n  /* the height is 100% minus the 2 navbars */\\n  height: calc(100vh - 58px); }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXHNvdXJjZWNvZGVcXEdpdEh1YlxcYW5ndWxhci1zbGlja2dyaWQtYnM0LWRlbW8vc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGlCQUFnQixFQUNqQjs7QUFDRDtFQUNFLFdBQVUsRUFDWDs7QUFDRDtFQUNJLGFBQVksRUFDZjs7QUFDRDtFQUNJLGFBQVksRUFDZjs7QUFDRDtFQUNFLDBCQUF5QjtFQUN6QixnQ0FBK0I7RUFDL0IsaUJBQWdCO0VBQ2hCLGtCQUFpQjtFQUVqQiw0Q0FBNEM7RUFDNUMsMkJBQTBCLEVBQzNCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJvZHktY29udGVudCB7XHJcbiAgbWFyZ2luLXRvcDogNThweDtcclxufVxyXG4ucmVkIHtcclxuICBjb2xvcjogcmVkO1xyXG59XHJcbi5mYWRlZCB7XHJcbiAgICBvcGFjaXR5OiAwLjI7XHJcbn1cclxuLmZhZGVkOmhvdmVyIHtcclxuICAgIG9wYWNpdHk6IDAuNTtcclxufVxyXG4ubGlua3Mge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XHJcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2QwZDBkMDtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xyXG5cclxuICAvKiB0aGUgaGVpZ2h0IGlzIDEwMCUgbWludXMgdGhlIDIgbmF2YmFycyAqL1xyXG4gIGhlaWdodDogY2FsYygxMDB2aCAtIDU4cHgpO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, Injectable, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, Editors, FieldType, Formatters, GridOption, GridService, OnEventArgs } from 'angular-slickgrid';\r\n\r\n@Component({\r\n  styles: ['.duration-bg { background-color: #e9d4f1 !important }'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './grid-additem.component.html'\r\n})\r\n@Injectable()\r\nexport class GridAddItemComponent implements OnInit {\r\n  title = 'Example 11: Add / Update / Highlight a Datagrid Item';\r\n  subTitle = `\r\n  Add / Update / Hightlight an Item from the Datagrid (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Add,-Update-or-Highlight-a-Datagrid-Item\" target=\"_blank\">Wiki docs</a>).\r\n  <ul>\r\n    <li><b>Note:</b> this demo is <b>only</b> on the datagrid (client) side, you still need to deal with the backend yourself</li>\r\n    <li>Adding an item, will always be showing as the 1st item in the grid because that is the best visual place to add it</li>\r\n    <li>Add/Update an item requires a valid Slickgrid Selection Model, you have 2 choices to deal with this:</li>\r\n    <ul><li>You can enable \"enableCheckboxSelector\" or \"enableRowSelection\" to True</li></ul>\r\n    <li>Click on any of the buttons below to test this out</li>\r\n    <li>You can change the highlighted color &amp; animation by changing the <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/modules/angular-slickgrid/styles/_variables.scss\" target=\"_blank\">SASS Variables</a>:</li>\r\n    <ul>\r\n      <li>\"$row-highlight-background-color\" or \"$row-highlight-fade-animation\"</li>\r\n    </ul>\r\n    <li>You can also add CSS class(es) on the fly (or on page load) on rows with certain criteria, (e.g. click on last button)\r\n    <ul>\r\n      <li>Example, click on button \"Highlight Rows with Duration over 50\" to see row styling changing. <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Dynamically-Add-CSS-Classes-to-Item-Rows\" target=\"_blank\">Wiki doc</a></li>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  grid: any;\r\n  gridService: GridService;\r\n  dataView: any;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  updatedObject: any;\r\n\r\n  constructor() {}\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.dataView = angularGrid.dataView;\r\n    this.grid = angularGrid.slickGrid;\r\n    this.gridService = angularGrid.gridService;\r\n\r\n    // if you want to change background color of Duration over 50 right after page load,\r\n    // you would put the code here, also make sure to re-render the grid for the styling to be applied right away\r\n    /*\r\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver50(this.dataView.getItemMetadata);\r\n    this.grid.invalidate();\r\n    this.grid.render();\r\n    */\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: Editors.longText\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration',\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.text\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          alert('onCellChange directly attached to the column definition');\r\n          console.log(args);\r\n        }\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete',\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.integer\r\n        }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        formatter: Formatters.dateIso,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        /*\r\n        editor: {\r\n          model: Editors.date\r\n        }\r\n        */\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        formatter: Formatters.dateIso, sortable: true,\r\n        type: FieldType.date\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.checkbox\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      asyncEditorLoading: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      editable: true,\r\n      enableColumnPicker: true,\r\n      enableCellNavigation: true,\r\n      enableRowSelection: true\r\n    };\r\n\r\n    // mock a dataset\r\n    const mockedDataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockedDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockedDataset;\r\n  }\r\n\r\n  addNewItem() {\r\n    const newId = this.dataset.length;\r\n    const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n    const randomMonth = Math.floor(Math.random() * 11);\r\n    const randomDay = Math.floor((Math.random() * 29));\r\n    const randomPercent = Math.round(Math.random() * 100);\r\n\r\n    const newItem = {\r\n      id: newId,\r\n      title: 'Task ' + newId,\r\n      duration: Math.round(Math.random() * 100) + '',\r\n      percentComplete: randomPercent,\r\n      percentCompleteNumber: randomPercent,\r\n      start: new Date(randomYear, randomMonth, randomDay),\r\n      finish: new Date(randomYear, (randomMonth + 2), randomDay),\r\n      effortDriven: true\r\n    };\r\n    this.angularGrid.gridService.addItemToDatagrid(newItem);\r\n  }\r\n\r\n  highlighFifthRow() {\r\n    this.angularGrid.gridService.highlightRow(4, 1500);\r\n  }\r\n\r\n  /** Change the Duration Rows Background Color */\r\n  changeDurationBackgroundColor() {\r\n    this.dataView.getItemMetadata = this.updateItemMetadataForDurationOver50(this.dataView.getItemMetadata);\r\n\r\n    // also re-render the grid for the styling to be applied right away\r\n    this.grid.invalidate();\r\n    this.grid.render();\r\n\r\n    // or use the Angular-SlickGrid GridService\r\n    // this.gridService.renderGrid();\r\n  }\r\n\r\n  /**\r\n   * Change the SlickGrid Item Metadata, we will add a CSS class on all rows with a Duration over 50\r\n   * For more info, you can see this SO https://stackoverflow.com/a/19985148/1212166\r\n   */\r\n  updateItemMetadataForDurationOver50(previousItemMetadata: any) {\r\n    const newCssClass = 'duration-bg';\r\n\r\n    return (rowNumber: number) => {\r\n      const item = this.dataView.getItem(rowNumber);\r\n      let meta = {\r\n        cssClasses: ''\r\n      };\r\n      if (typeof previousItemMetadata === 'object') {\r\n        meta = previousItemMetadata(rowNumber);\r\n      }\r\n\r\n      if (meta && item && item.duration) {\r\n        const duration = +item.duration; // convert to number\r\n        if (duration > 50) {\r\n          meta.cssClasses = (meta.cssClasses || '') + ' ' + newCssClass;\r\n        }\r\n      }\r\n\r\n      return meta;\r\n    };\r\n  }\r\n\r\n  updateSecondItem() {\r\n    const updatedItem = this.angularGrid.gridService.getDataItemByRowNumber(1);\r\n    updatedItem.duration = Math.round(Math.random() * 100);\r\n    this.angularGrid.gridService.updateDataGridItem(updatedItem);\r\n\r\n    // OR by id\r\n    // this.angularGrid.gridService.updateDataGridItemById(updatedItem.id, updatedItem);\r\n  }\r\n}\r\n","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { AngularGridInstance, Column, FieldType, Filters, Formatters, GridOption } from 'angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  templateUrl: './grid-menu.component.html'\r\n})\r\n@Injectable()\r\nexport class GridMenuComponent implements OnInit {\r\n  title = 'Example 9: Grid Menu Control';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Controls.GridMenu</b> plugin to easily add a Grid Menu (aka hamburger menu) on the top right corner of the grid.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-Menu\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul>\r\n      <li>The Grid Menu uses the following icon by default \"fa-bars\"&nbsp;&nbsp;<span class=\"fa fa-bars\"></span>&nbsp;&nbsp;(which looks like a hamburger, hence the name)</li>\r\n      <ul><li>Another icon which you could use is \"fa-ellipsis-v\"&nbsp;&nbsp;<span class=\"fa fa-ellipsis-v\"></span>&nbsp;&nbsp;(which is shown in this example)</li></ul>\r\n      <li>By default the Grid Menu shows all columns which you can show/hide</li>\r\n      <li>You can configure multiple \"commands\" to show up in the Grid Menu and use the \"onGridMenuCommand()\" callback</li>\r\n      <li>Doing a \"right+click\" over any column header will also provide a way to show/hide a column (via the Column Picker Plugin)</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  selectedLanguage: string;\r\n  visibleColumns: Column[];\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', headerKey: 'TITLE', filterable: true, type: FieldType.string },\r\n      { id: 'duration', name: 'Duration', field: 'duration', headerKey: 'DURATION', sortable: true, filterable: true, type: FieldType.string },\r\n      {\r\n        id: '%', name: '% Complete', field: 'percentComplete', sortable: true, filterable: true,\r\n        type: FieldType.number,\r\n        formatter: Formatters.percentCompleteBar,\r\n        filter: { model: Filters.compoundSlider, params: { hideSliderNumber: false } }\r\n      },\r\n      { id: 'start', name: 'Start', field: 'start', headerKey: 'START', filterable: true, type: FieldType.string },\r\n      { id: 'finish', name: 'Finish', field: 'finish', headerKey: 'FINISH', filterable: true, type: FieldType.string },\r\n      {\r\n        id: 'effort-driven', name: 'Completed', field: 'effortDriven', headerKey: 'COMPLETED', maxWidth: 80, formatter: Formatters.checkmark,\r\n        type: FieldType.boolean,\r\n        minWidth: 100,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\r\n          model: Filters.singleSelect\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.visibleColumns = this.columnDefinitions;\r\n\r\n    this.gridOptions = {\r\n      columnPicker: {\r\n        hideForceFitButton: true,\r\n        hideSyncResizeButton: true,\r\n        onColumnsChanged: (e, args) => {\r\n          console.log('Column selection changed from Column Picker, visible columns: ', args.columns);\r\n        }\r\n      },\r\n      enableAutoResize: true,\r\n      enableGridMenu: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableFiltering: true,\r\n      enableCellNavigation: true,\r\n      gridMenu: {\r\n        // all titles optionally support translation keys, if you wish to use that feature then use the title properties finishing by 'Key'\r\n        // example \"customTitle\" for a plain string OR \"customTitleKey\" to use a translation key\r\n        customTitleKey: 'CUSTOM_COMMANDS',\r\n        iconCssClass: 'fa fa-ellipsis-v',\r\n        hideForceFitButton: true,\r\n        hideSyncResizeButton: true,\r\n        hideToggleFilterCommand: false, // show/hide internal custom commands\r\n        menuWidth: 17,\r\n        resizeOnShowHeaderRow: true,\r\n        customItems: [\r\n          // add Custom Items Commands at the bottom of the already existing internal custom items\r\n          // you cannot override an internal items but you can hide them and create your own\r\n          // also note that the internal custom commands are in the positionOrder range of 50-60,\r\n          // if you want yours at the bottom then start with 61, below 50 will make your command(s) on top\r\n          {\r\n            iconCssClass: 'fa fa-question-circle',\r\n            titleKey: 'HELP',\r\n            disabled: false,\r\n            command: 'help',\r\n            positionOrder: 99\r\n          },\r\n          {\r\n            title: 'Disabled command',\r\n            disabled: true,\r\n            command: 'disabled-command',\r\n            positionOrder: 98\r\n          }\r\n        ],\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'help') {\r\n            alert('Please help!!!');\r\n          }\r\n        },\r\n        onColumnsChanged: (e, args) => {\r\n          console.log('Column selection changed from Grid Menu, visible columns: ', args.columns);\r\n        }\r\n      },\r\n      enableTranslate: true,\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  switchLanguage() {\r\n    this.selectedLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.translate.use(this.selectedLanguage);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Column, GridOption } from 'angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-basic.component.html'\r\n})\r\nexport class GridBasicComponent implements OnInit {\r\n  title = 'Example 1: Basic Grid';\r\n  subTitle = `\r\n    Basic Grid with fixed sizes (800 x 400) set by \"gridHeight\" &amp; \"gridWidth\"\r\n    <ul>\r\n      <li><a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/HOWTO---Step-by-Step\" target=\"_blank\">Wiki HOWTO link</a></li>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions1: Column[];\r\n  columnDefinitions2: Column[];\r\n  gridOptions1: GridOption;\r\n  gridOptions2: GridOption;\r\n  dataset1: any[];\r\n  dataset2: any[];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true },\r\n      { id: 'start', name: 'Start', field: 'start' },\r\n      { id: 'finish', name: 'Finish', field: 'finish' },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', sortable: true }\r\n    ];\r\n    this.gridOptions1 = {\r\n      enableAutoResize: false,\r\n      enableSorting: true\r\n    };\r\n\r\n    // copy the same Grid Options and Column Definitions to 2nd grid\r\n    this.columnDefinitions2 = this.columnDefinitions1;\r\n    this.gridOptions2 = this.gridOptions1;\r\n\r\n    // mock some data (different in each dataset)\r\n    this.dataset1 = this.mockData();\r\n    this.dataset2 = this.mockData();\r\n  }\r\n\r\n  mockData() {\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        start: `${randomMonth}/${randomDay}/${randomYear}`,\r\n        finish: `${randomMonth}/${randomDay}/${randomYear}`,\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n\r\n    return mockDataset;\r\n  }\r\n}\r\n","import { Column, Filter, FilterArguments, FilterCallback, OperatorType, OperatorString, SearchTerm } from 'angular-slickgrid';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\nexport class CustomInputFilter implements Filter {\r\n  private $filterElm: any;\r\n  grid: any;\r\n  searchTerms: SearchTerm[];\r\n  columnDef: Column;\r\n  callback: FilterCallback;\r\n  operator: OperatorType | OperatorString = OperatorType.equal;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Initialize the Filter\r\n   */\r\n  init(args: FilterArguments) {\r\n    this.grid = args.grid;\r\n    this.callback = args.callback;\r\n    this.columnDef = args.columnDef;\r\n    this.searchTerms = args.searchTerms || [];\r\n\r\n    // filter input can only have 1 search term, so we will use the 1st array index if it exist\r\n    const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms[0]) || '';\r\n\r\n    // step 1, create HTML string template\r\n    const filterTemplate = this.buildTemplateHtmlString();\r\n\r\n    // step 2, create the DOM Element of the filter & initialize it if searchTerm is filled\r\n    this.$filterElm = this.createDomElement(filterTemplate, searchTerm);\r\n\r\n    // step 3, subscribe to the keyup event and run the callback when that happens\r\n    this.$filterElm.keyup((e: any) => this.callback(e, { columnDef: this.columnDef }));\r\n  }\r\n\r\n  /**\r\n   * Clear the filter value\r\n   */\r\n  clear() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.val('');\r\n      this.$filterElm.trigger('keyup');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * destroy the filter\r\n   */\r\n  destroy() {\r\n    if (this.$filterElm) {\r\n      this.$filterElm.off('keyup').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set value(s) on the DOM element\r\n   */\r\n  setValues(values) {\r\n    if (values) {\r\n      this.$filterElm.val(values);\r\n    }\r\n  }\r\n\r\n  //\r\n  // private functions\r\n  // ------------------\r\n\r\n  /**\r\n   * Create the HTML template as a string\r\n   */\r\n  private buildTemplateHtmlString() {\r\n    return `<input type=\"text\" class=\"form-control search-filter\" placeholder=\"Custom Filter\">`;\r\n  }\r\n\r\n  /**\r\n   * From the html template string, create a DOM element\r\n   * @param filterTemplate\r\n   */\r\n  private createDomElement(filterTemplate: string, searchTerm?: SearchTerm) {\r\n    const $headerElm = this.grid.getHeaderRowColumn(this.columnDef.id);\r\n    $($headerElm).empty();\r\n\r\n    // create the DOM element & add an ID and filter class\r\n    const $filterElm = $(filterTemplate);\r\n\r\n    $filterElm.val(searchTerm);\r\n    $filterElm.attr('id', `filter-${this.columnDef.id}`);\r\n    $filterElm.data('columnId', this.columnDef.id);\r\n\r\n    // append the new DOM element to the header row\r\n    if ($filterElm && typeof $filterElm.appendTo === 'function') {\r\n      $filterElm.appendTo($headerElm);\r\n    }\r\n\r\n    return $filterElm;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AngularGridInstance, Column, FieldType, Filters, Formatters, GridOption, GridStateChange, OperatorType, Statistic } from 'angular-slickgrid';\r\nimport { CustomInputFilter } from './custom-inputFilter';\r\n\r\nfunction randomBetween(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nconst NB_ITEMS = 500;\r\nconst URL_SAMPLE_COLLECTION_DATA = 'assets/data/collection_500_numbers.json';\r\n\r\n@Component({\r\n  templateUrl: './grid-clientside.component.html'\r\n})\r\nexport class GridClientSideComponent implements OnInit {\r\n  title = 'Example 4: Client Side Sort/Filter';\r\n  subTitle = `\r\n    Sort/Filter on client side only using SlickGrid DataView (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Sorting\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Support multi-sort (by default), hold \"Shift\" key and click on the next column to sort.\r\n      <li>All column types support the following operators: (>, >=, <, <=, <>, !=, =, ==, *)\r\n      <ul>\r\n        <li>Example: >100 ... >=2001-01-01 ... >02/28/17</li>\r\n        <li><b>Note:</b> For filters to work properly (default is string), make sure to provide a FieldType (type is against the dataset, not the Formatter)</li>\r\n      </ul>\r\n      <li>Date Filters</li>\r\n      <ul>\r\n        <li>FieldType of dateUtc/date (from dataset) can use an extra option of \"filterSearchType\" to let user filter more easily. For example, in the \"UTC Date\" field below, you can type \"&gt;02/28/2017\", also when dealing with UTC you have to take the time difference in consideration.</li>\r\n      </ul>\r\n      <li>On String filters, (*) can be used as startsWith (Hello* => matches \"Hello Word\") ... endsWith (*Doe => matches: \"John Doe\")</li>\r\n      <li>Custom Filter are now possible, \"Description\" column below, is a customized InputFilter with different placeholder. See <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Custom-Filter\" target=\"_blank\">Wiki - Custom Filter</a>\r\n      <li>MultipleSelect & SingeSelect Filters can use a regular \"collection\" or \"collectionAsync\" to load it asynchronously</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  statistics: Statistic;\r\n\r\n  constructor(private http: HttpClient, private translate: TranslateService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, minWidth: 55,\r\n        type: FieldType.string, filterable: true, filter: { model: Filters.compoundInput }\r\n      },\r\n      { id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80,\r\n        type: FieldType.string,\r\n        filter: {\r\n          model: new CustomInputFilter() // create a new instance to make each Filter independent from each other\r\n        }\r\n      },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\r\n        minWidth: 55,\r\n        filterable: true,\r\n        filter: {\r\n          collectionAsync: this.http.get<{ option: string; value: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          collectionFilterBy: {\r\n            property: 'value',\r\n            operator: OperatorType.notEqual,\r\n            value: 365\r\n          },\r\n          collectionSortBy: {\r\n            property: 'value',\r\n            sortDesc: true,\r\n            fieldType: FieldType.number\r\n          },\r\n          customStructure: {\r\n            value: 'value',\r\n            label: 'label',\r\n            labelSuffix: 'text',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' '\r\n          },\r\n          model: Filters.multipleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            maxHeight: 250,\r\n            width: 175\r\n          }\r\n        }\r\n      },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, minWidth: 70, type: FieldType.number, sortable: true,\r\n        filterable: true, filter: { model: Filters.compoundInput }\r\n      },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, minWidth: 75, exportWithFormatter: true,\r\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      { id: 'usDateShort', name: 'US Date Short', field: 'usDateShort', exportWithFormatter: true, sortable: true, minWidth: 70, width: 70,\r\n        type: FieldType.dateUsShort, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      { id: 'utcDate', name: 'UTC Date', field: 'utcDate', exportWithFormatter: true, formatter: Formatters.dateTimeIsoAmPm, sortable: true, minWidth: 115,\r\n        type: FieldType.dateUtc, outputType: FieldType.dateTimeIsoAmPm, filterable: true, filter: { model: Filters.compoundDate } },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven.isEffort', minWidth: 85, maxWidth: 85,\r\n        type: FieldType.boolean,\r\n        sortable: true,\r\n\r\n        // to pass multiple formatters, use the params property\r\n        // also these formatters are executed in sequence, so if you want the checkmark to work correctly, it has to be the last formatter defined\r\n        formatter: Formatters.multiple,\r\n        params: { formatters: [Formatters.complexObject, Formatters.checkmark] },\r\n\r\n        // when the \"field\" string includes the dot \".\" notation, the library will consider this to be a complex object and Filter accordingly\r\n        filterable: true,\r\n        filter: {\r\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\r\n          // enableRenderHtml: true,\r\n          // collection: [{ value: '', label: '' }, { value: true, label: 'True', labelPrefix: `<i class=\"fa fa-check\"></i> ` }, { value: false, label: 'False' }],\r\n\r\n          collection: [ { isEffort: '', label: '' }, { isEffort: true, label: 'True' }, { isEffort: false, label: 'False' } ],\r\n          customStructure: {\r\n            value: 'isEffort',\r\n            label: 'label'\r\n          },\r\n          model: Filters.singleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          },\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      i18n: this.translate,\r\n\r\n      // use columnDef searchTerms OR use presets as shown below\r\n      presets: {\r\n        filters: [\r\n          { columnId: 'duration', searchTerms: [2, 22, 44] },\r\n          // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\r\n          { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\r\n          // { columnId: 'effort-driven', searchTerms: [true] }\r\n        ],\r\n        sorters: [\r\n          { columnId: 'duration', direction: 'DESC' },\r\n          { columnId: 'complete', direction: 'ASC' }\r\n        ],\r\n      }\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  mockData(itemCount, startingIndex = 0): any[] {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomDuration = Math.round(Math.random() * 100);\r\n      const randomYear = randomBetween(2000, 2025);\r\n      const randomYearShort = randomBetween(10, 25);\r\n      const randomMonth = randomBetween(1, 12);\r\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\r\n      const randomDay = randomBetween(10, 28);\r\n      const randomPercent = randomBetween(0, 100);\r\n      const randomHour = randomBetween(10, 23);\r\n      const randomTime = randomBetween(10, 59);\r\n      const randomIsEffort = (i % 3 === 0);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\r\n        duration: randomDuration,\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: (i % 4) ? null : new Date(randomYear, randomMonth, randomDay),          // provide a Date format\r\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\r\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}Z`,\r\n        effortDriven: {\r\n          isEffort: randomIsEffort,\r\n          label: randomIsEffort ? 'Effort' : 'NoEffort',\r\n        }\r\n      });\r\n    }\r\n\r\n    return tempDataset;\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridState: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridState);\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState(grid) {\r\n    console.log('Client sample, last Grid State:: ', this.angularGrid.gridStateService.getCurrentGridState());\r\n  }\r\n\r\n  refreshStatistics(e, args) {\r\n    if (args && args.current > 0) {\r\n      setTimeout(() => {\r\n        this.statistics = {\r\n          startTime: new Date(),\r\n          itemCount: args && args.current,\r\n          totalItemCount: this.dataset.length\r\n        };\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Column, FieldType, Formatter, Formatters, GridOption } from 'angular-slickgrid';\r\n\r\n// create my custom Formatter with the Formatter type\r\nconst myCustomCheckmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? `<i class=\"fa fa-fire\" aria-hidden=\"true\"></i>` : '<i class=\"fa fa-snowflake-o\" aria-hidden=\"true\"></i>';\r\n\r\n@Component({\r\n  templateUrl: './grid-colspan.component.html'\r\n})\r\nexport class GridColspanComponent implements OnInit {\r\n  title = 'Example 15: Column Span & Header Grouping';\r\n  subTitle = `\r\n  This example demonstrates how to easily span a row over multiple columns & how to group header titles.\r\n  <ul>\r\n    <li>\r\n      Row Colspan - (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Colspan\" target=\"_blank\">Wiki docs</a>) |\r\n      Header Grouping - (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Title-Grouping\" target=\"_blank\">Wiki docs</a>)\r\n    </li>\r\n    <li>Note that you can add Sort but remember that it will sort by the data that the row contains, even if the data is visually hidden by colspan it will still sort it</li>\r\n    <li>\r\n      Header Grouping spanning accross multiple columns is working but has some UI issues on window resize.\r\n      If anyone can fix it, probably some CSS issues, please let us know.\r\n    </li>\r\n  </ul>\r\n  `;\r\n\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset = [];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, columnGroup: 'Common Factor' },\r\n      { id: 'duration', name: 'Duration', field: 'duration', columnGroup: 'Common Factor' },\r\n      { id: 'start', name: 'Start', field: 'start', columnGroup: 'Period' },\r\n      { id: 'finish', name: 'Finish', field: 'finish', columnGroup: 'Period' },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', selectable: false, columnGroup: 'Analysis' },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', type: FieldType.boolean, columnGroup: 'Analysis' }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableColumnReorder: false,\r\n      enableSorting: true,\r\n      createPreHeaderPanel: true,\r\n      showPreHeaderPanel: true,\r\n      preHeaderPanelHeight: 25,\r\n      explicitInitialization: true,\r\n      colspanCallback: this.renderDifferentColspan\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: '5 days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  /**\r\n   * A callback to render different row column span\r\n   * Your callback will always have the \"item\" argument which you can use to decide on the colspan\r\n   * Your return must always be in the form of:: return { columns: {}}\r\n   */\r\n  renderDifferentColspan(item: any) {\r\n    if (item.id % 2 === 1) {\r\n      return {\r\n        columns: {\r\n          duration: {\r\n            colspan: 3 // \"duration\" will span over 3 columns\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        columns: {\r\n          0: {\r\n            colspan: '*' // starting at column index 0, we will span accross all column (*)\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit } from '@angular/core';\nimport {\n  AngularGridInstance,\n  Aggregators,\n  Column,\n  FieldType,\n  Filters,\n  Formatters,\n  GridOption,\n  Grouping,\n  GroupTotalFormatters,\n  SortDirectionNumber,\n  Sorters\n} from 'angular-slickgrid';\n\n@Injectable()\n@Component({\n  templateUrl: './grid-draggrouping.component.html'\n})\nexport class GridDraggableGroupingComponent implements OnInit {\n    title = 'Example 19: Draggable Grouping & Aggregators';\n    subTitle = `\n      <ul>\n        <li><a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators\" target=\"_blank\">Wiki docs</a></li>\n        <li>This example shows 3 ways of grouping</li>\n        <ol>\n          <li>Drag any Column Header on the top placeholder to group by that column (support moti-columns grouping by adding more columns to the drop area).</li>\n          <li>Use buttons and defined functions to group by wichever field you want</li>\n          <li>Use the Select dropdown to group, the position of the Selects represent the grouping level</li>\n        </ol>\n        <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates ovor 50'000 items</li>\n        <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n        <li>Use \"Aggregators\" and \"GroupTotalFormatters\" directly from Angular-Slickgrid</li>\n      </ul>\n    `;\n\n    angularGrid: AngularGridInstance;\n    columnDefinitions: Column[];\n    dataset: any[];\n    dataviewObj: any;\n    draggableGroupingPlugin: any;\n    durationOrderByCount = false;\n    gridObj: any;\n    gridOptions: GridOption;\n    processing = false;\n    selectedGroupingFields: string[] = ['', '', ''];\n\n    constructor() {\n      // define the grid options & columns and then create the grid itself\n      this.loadData(500);\n      this.defineGrid();\n    }\n\n    ngOnInit(): void {\n      // populate the dataset once the grid is ready\n      this.defineGrid();\n    }\n\n    angularGridReady(angularGrid: AngularGridInstance) {\n      this.angularGrid = angularGrid;\n      this.gridObj = angularGrid.slickGrid; // grid object\n      this.dataviewObj = angularGrid.dataView;\n    }\n\n    /* Define grid Options and Columns */\n    defineGrid() {\n      this.columnDefinitions = [\n        {\n          id: 'title', name: 'Title', field: 'title',\n          width: 70, minWidth: 50,\n          cssClass: 'cell-title',\n          filterable: true,\n          sortable: true,\n          grouping: {\n            getter: 'title',\n            formatter: (g) => {\n              return `Title:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: false,\n            collapsed: false\n          }\n        },\n        {\n          id: 'duration', name: 'Duration', field: 'duration',\n          width: 70,\n          sortable: true,\n          filterable: true,\n          filter: { model: Filters.slider, operator: '>=' },\n          type: FieldType.number,\n          groupTotalsFormatter: GroupTotalFormatters.sumTotals,\n          grouping: {\n            getter: 'duration',\n            formatter: (g) => {\n              return `Duration:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            comparer: (a, b) => {\n              return this.durationOrderByCount ? (a.count - b.count) : Sorters.numeric(a.value, b.value, SortDirectionNumber.asc);\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: false,\n            collapsed: false\n          }\n        },\n        {\n          id: 'percentComplete', name: '% Complete', field: 'percentComplete',\n          minWidth: 70, width: 90,\n          formatter: Formatters.percentCompleteBar,\n          type: FieldType.number,\n          filterable: true,\n          filter: { model: Filters.compoundSlider },\n          sortable: true,\n          groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\n          grouping: {\n            getter: 'percentComplete',\n            formatter: (g) => {\n              return `% Complete:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: false,\n            collapsed: false\n          },\n          params: { groupFormatterPrefix: '<i>Avg</i>: ' }\n        },\n        {\n          id: 'start', name: 'Start', field: 'start', minWidth: 60,\n          sortable: true,\n          filterable: true,\n          filter: { model: Filters.compoundDate },\n          formatter: Formatters.dateIso,\n          type: FieldType.dateUtc,\n          outputType: FieldType.dateIso,\n          exportWithFormatter: true,\n          grouping: {\n            getter: 'start',\n            formatter: (g) => {\n              return `Start: ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: false,\n            collapsed: false\n          }\n        },\n        {\n          id: 'finish', name: 'Finish', field: 'finish',\n          minWidth: 60,\n          sortable: true,\n          filterable: true,\n          filter: { model: Filters.compoundDate },\n          formatter: Formatters.dateIso,\n          type: FieldType.dateUtc,\n          outputType: FieldType.dateIso,\n          exportWithFormatter: true,\n          grouping: {\n            getter: 'finish',\n            formatter: (g) => {\n              return `Finish: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: false,\n            collapsed: false\n          }\n        },\n        {\n          id: 'cost', name: 'Cost', field: 'cost',\n          width: 90,\n          sortable: true,\n          filterable: true,\n          filter: { model: Filters.compoundInput },\n          formatter: Formatters.dollar,\n          groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollar,\n          type: FieldType.number,\n          grouping: {\n            getter: 'cost',\n            formatter: (g) => {\n              return `Cost: ${g.value} <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            aggregateCollapsed: true,\n            collapsed: true\n          }\n        },\n        {\n          id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\n          width: 80, minWidth: 20, maxWidth: 100,\n          cssClass: 'cell-effort-driven',\n          sortable: true,\n          filterable: true,\n          filter: {\n            collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\n            model: Filters.singleSelect\n          },\n          formatter: Formatters.checkmark,\n          grouping: {\n            getter: 'effortDriven',\n            formatter: (g) => {\n              return `Effort-Driven: ${g.value ? 'True' : 'False'} <span style=\"color:green\">(${g.count} items)</span>`;\n            },\n            aggregators: [\n              new Aggregators.Sum('cost')\n            ],\n            collapsed: false\n          }\n        }\n      ];\n\n      this.gridOptions = {\n        autoResize: {\n          containerId: 'demo-container',\n          sidePadding: 15\n        },\n        enableDraggableGrouping: true,\n        createPreHeaderPanel: true,\n        showPreHeaderPanel: true,\n        preHeaderPanelHeight: 40,\n        enableFiltering: true,\n        enableSorting: true,\n        enableColumnReorder: true,\n        exportOptions: {\n          sanitizeDataExport: true\n        },\n        gridMenu: {\n          onCommand: (e, args) => {\n            if (args.command === 'toggle-preheader') {\n              // in addition to the grid menu pre-header toggling (internally), we will also clear grouping\n              this.clearGrouping();\n            }\n          },\n        },\n        draggableGrouping: {\n          dropPlaceHolderText: 'Drop a column header here to group by the column',\n          // groupIconCssClass: 'fa fa-outdent',\n          deleteIconCssClass: 'fa fa-times',\n          onGroupChanged: (e, args) => this.onGroupChanged(args && args.groupColumns),\n          onExtensionRegistered: (extension) => this.draggableGroupingPlugin = extension,\n        }\n      };\n\n      this.loadData(500);\n    }\n\n    loadData(rowCount: number) {\n      // mock a dataset\n      this.dataset = [];\n      for (let i = 0; i < rowCount; i++) {\n        const randomYear = 2000 + Math.floor(Math.random() * 10);\n        const randomMonth = Math.floor(Math.random() * 11);\n        const randomDay = Math.floor((Math.random() * 29));\n        const randomPercent = Math.round(Math.random() * 100);\n\n        this.dataset[i] = {\n          id: 'id_' + i,\n          num: i,\n          title: 'Task ' + i,\n          duration: Math.round(Math.random() * 100) + '',\n          percentComplete: randomPercent,\n          percentCompleteNumber: randomPercent,\n          start: new Date(randomYear, randomMonth, randomDay),\n          finish: new Date(randomYear, (randomMonth + 1), randomDay),\n          cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\n          effortDriven: (i % 5 === 0)\n        };\n      }\n    }\n\n    clearGroupsAndSelects() {\n      this.selectedGroupingFields.forEach((g, i) => this.selectedGroupingFields[i] = '');\n      this.clearGrouping();\n    }\n\n    clearGrouping() {\n      if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\n        this.draggableGroupingPlugin.clearDroppedGroups();\n      }\n    }\n\n    collapseAllGroups() {\n      this.dataviewObj.collapseAllGroups();\n    }\n\n    expandAllGroups() {\n      this.dataviewObj.expandAllGroups();\n    }\n\n    groupByDuration() {\n      this.clearGrouping();\n      if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\n        this.showPreHeader();\n        this.draggableGroupingPlugin.setDroppedGroups('duration');\n        this.gridObj.invalidate();\n        this.gridObj.render();\n      }\n    }\n\n    groupByDurationOrderByCount(isOrderingByCount = false) {\n      this.durationOrderByCount = isOrderingByCount;\n      this.clearGrouping();\n      this.groupByDuration();\n    }\n\n    groupByDurationEffortDriven() {\n      this.clearGrouping();\n      if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\n        this.showPreHeader();\n        this.draggableGroupingPlugin.setDroppedGroups(['duration', 'effortDriven']);\n        this.gridObj.invalidate();\n        this.gridObj.render();\n      }\n    }\n\n    groupByFieldName(fieldName, index) {\n      this.clearGrouping();\n      if (this.draggableGroupingPlugin && this.draggableGroupingPlugin.setDroppedGroups) {\n        // get the field names from Group By select(s) dropdown, but filter out any empty fields\n        const groupedFields = this.selectedGroupingFields.filter((g) => g !== '');\n\n        this.showPreHeader();\n        this.draggableGroupingPlugin.setDroppedGroups(groupedFields);\n        this.gridObj.invalidate();\n        this.gridObj.render();\n      }\n    }\n\n    onGroupChanged(groups: Grouping[]) {\n      if (Array.isArray(this.selectedGroupingFields) && Array.isArray(groups) && groups.length > 0) {\n        // update all Group By select dropdown\n        this.selectedGroupingFields.forEach((g, i) => this.selectedGroupingFields[i] = groups[i] && groups[i].getter || '');\n      }\n    }\n\n    showPreHeader() {\n      this.gridObj.setPreHeaderPanelVisibility(true);\n    }\n\n    selectTrackByFn(index, item) {\n      return index;\n    }\n\n    toggleDraggableGroupingRow() {\n      this.clearGrouping();\n      this.gridObj.setPreHeaderPanelVisibility(!this.gridObj.getOptions().showPreHeaderPanel);\n    }\n  }\n","import { Editor, KeyCode } from 'angular-slickgrid';\r\n\r\n// using external non-typed js libraries\r\ndeclare var $: any;\r\n\r\n/*\r\n * An example of a 'detached' editor.\r\n * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.\r\n */\r\nexport class CustomInputEditor implements Editor {\r\n  $input: any;\r\n  defaultValue: any;\r\n\r\n  constructor(private args: any) {\r\n    this.init();\r\n  }\r\n\r\n  init(): void {\r\n    this.$input = $(`<input type=\"text\" class=\"editor-text\" placeholder=\"custom\" />`)\r\n      .appendTo(this.args.container)\r\n      .on('keydown.nav', (e) => {\r\n        if (e.keyCode === KeyCode.LEFT || e.keyCode === KeyCode.RIGHT) {\r\n          e.stopImmediatePropagation();\r\n        }\r\n      });\r\n\r\n    setTimeout(() => {\r\n      this.$input.focus().select();\r\n    }, 50);\r\n  }\r\n\r\n  destroy() {\r\n    this.$input.remove();\r\n  }\r\n\r\n  focus() {\r\n    this.$input.focus();\r\n  }\r\n\r\n  getValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  setValue(val: string) {\r\n    this.$input.val(val);\r\n  }\r\n\r\n  loadValue(item: any) {\r\n    this.defaultValue = item[this.args.column.field] || '';\r\n    this.$input.val(this.defaultValue);\r\n    this.$input[0].defaultValue = this.defaultValue;\r\n    this.$input.select();\r\n  }\r\n\r\n  serializeValue() {\r\n    return this.$input.val();\r\n  }\r\n\r\n  applyValue(item: any, state: any) {\r\n    item[this.args.column.field] = state;\r\n  }\r\n\r\n  isValueChanged() {\r\n    return (!(this.$input.val() === '' && this.defaultValue === null)) && (this.$input.val() !== this.defaultValue);\r\n  }\r\n\r\n  validate() {\r\n    if (this.args.column.validator) {\r\n      const validationResults = this.args.column.validator(this.$input.val());\r\n      if (!validationResults.valid) {\r\n        return validationResults;\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      msg: null\r\n    };\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  Editors,\r\n  EditorArgs,\r\n  EditorValidator,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  OnEventArgs,\r\n  OperatorType,\r\n} from 'angular-slickgrid';\r\nimport { CustomInputEditor } from './custom-inputEditor';\r\nimport { CustomInputFilter } from './custom-inputFilter';\r\nimport { Subject } from 'rxjs';\r\n\r\n// using external non-typed js libraries\r\ndeclare var Slick: any;\r\ndeclare var $: any;\r\n\r\nconst NB_ITEMS = 100;\r\nconst URL_SAMPLE_COLLECTION_DATA = 'assets/data/collection_100_numbers.json';\r\nconst URL_COUNTRIES_COLLECTION = 'assets/data/countries.json';\r\nconst URL_COUNTRY_NAMES = 'assets/data/country_names.json';\r\n\r\n// you can create custom validator to pass to an inline editor\r\nconst myCustomTitleValidator: EditorValidator = (value: any, args: EditorArgs) => {\r\n  // you can get the Editor Args which can be helpful, e.g. we can get the Translate Service from it\r\n  const grid = args && args.grid;\r\n  const gridOptions = (grid && grid.getOptions) ? grid.getOptions() : {};\r\n  const translate = gridOptions.i18n;\r\n\r\n  // to get the editor object, you'll need to use \"internalColumnEditor\"\r\n  // don't use \"editor\" property since that one is what SlickGrid uses internally by it's editor factory\r\n  const columnEditor = args && args.column && args.column.internalColumnEditor;\r\n\r\n  if (value == null || value === undefined || !value.length) {\r\n    return { valid: false, msg: 'This is a required field' };\r\n  } else if (!/^Task\\s\\d+$/.test(value)) {\r\n    return { valid: false, msg: 'Your title is invalid, it must start with \"Task\" followed by a number' };\r\n    // OR use the Translate Service with your custom message\r\n    // return { valid: false, msg: translate.instant('YOUR_ERROR', { x: value }) };\r\n  } else {\r\n    return { valid: true, msg: '' };\r\n  }\r\n};\r\n\r\n// create a custom Formatter to show the Task + value\r\nconst taskFormatter = (row, cell, value, columnDef, dataContext) => {\r\n  if (value && Array.isArray(value)) {\r\n    const taskValues = value.map((val) => `Task ${val}`);\r\n    const values = taskValues.join(', ');\r\n    return `<span title=\"${values}\">${values}</span>`;\r\n  }\r\n  return '';\r\n};\r\n@Component({\r\n  templateUrl: './grid-editor.component.html'\r\n})\r\n@Injectable()\r\nexport class GridEditorComponent implements OnInit {\r\n  title = 'Example 3: Editors';\r\n  subTitle = `\r\n  Grid with Inline Editors and onCellClick actions (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Editors\" target=\"_blank\">Wiki docs</a>).\r\n  <ul>\r\n    <li>When using \"enableCellNavigation: true\", clicking on a cell will automatically make it active &amp; selected.</li>\r\n    <ul><li>If you don't want this behavior, then you should disable \"enableCellNavigation\"</li></ul>\r\n    <li>Inline Editors requires \"enableCellNavigation: true\" (not sure why though)</li>\r\n    <li>\r\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\r\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExportOptions\" or the column definition)\r\n    </li>\r\n    <li>MultipleSelect & SingeSelect Editors & Filters can use a regular \"collection\" or \"collectionAsync\" to load it asynchronously</li>\r\n    <ul>\r\n      <li>Click on \"Add Item\" and see the Editor/Filter or the \"Prerequesites\" column change</li>\r\n      <li>Any Editor/Filter with a \"collection\" can be changed dynamically later in the future</li>\r\n    </ul>\r\n  </ul>\r\n  `;\r\n\r\n  private _commandQueue = [];\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  gridObj: any;\r\n  isAutoEdit = true;\r\n  alertWarning: any;\r\n  updatedObject: any;\r\n  selectedLanguage = 'en';\r\n\r\n  constructor(private http: HttpClient, private translate: TranslateService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'edit',\r\n        field: 'id',\r\n        excludeFromHeaderMenu: true,\r\n        formatter: Formatters.editIcon,\r\n        minWidth: 30,\r\n        maxWidth: 30,\r\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Editing: ${args.dataContext.title}`;\r\n          this.angularGrid.gridService.highlightRow(args.row, 1500);\r\n          this.angularGrid.gridService.setSelectedRow(args.row);\r\n        }\r\n      }, {\r\n        id: 'delete',\r\n        field: 'id',\r\n        excludeFromHeaderMenu: true,\r\n        formatter: Formatters.deleteIcon,\r\n        minWidth: 30,\r\n        maxWidth: 30,\r\n        // use onCellClick OR grid.onClick.subscribe which you can see down below\r\n        /*\r\n        onCellClick: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Deleting: ${args.dataContext.title}`;\r\n        }\r\n        */\r\n      }, {\r\n        id: 'title',\r\n        name: 'Title',\r\n        field: 'title',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: Editors.longText,\r\n          validator: myCustomTitleValidator, // use a custom validator\r\n        },\r\n        onCellChange: (e: Event, args: OnEventArgs) => {\r\n          console.log(args);\r\n          this.alertWarning = `Updated Title: ${args.dataContext.title}`;\r\n        }\r\n      }, {\r\n        id: 'title2',\r\n        name: 'Title, Custom Editor',\r\n        field: 'title',\r\n        minWidth: 70,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          model: CustomInputEditor,\r\n          placeholder: 'custom',\r\n          validator: myCustomTitleValidator, // use a custom validator\r\n        },\r\n        filter: {\r\n          model: CustomInputFilter,\r\n          placeholder: '&#128269; custom',\r\n        },\r\n      }, {\r\n        id: 'duration',\r\n        name: 'Duration (days)',\r\n        field: 'duration',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        filter: { model: Filters.slider, params: { hideSliderNumber: false } },\r\n        editor: {\r\n          model: Editors.slider,\r\n          minValue: 0,\r\n          maxValue: 100,\r\n          // params: { hideSliderNumber: true },\r\n        },\r\n        /*\r\n        editor: {\r\n          // default is 0 decimals, if no decimals is passed it will accept 0 or more decimals\r\n          // however if you pass the \"decimalPlaces\", it will validate with that maximum\r\n          model: Editors.float,\r\n          minValue: 0,\r\n          maxValue: 365,\r\n          // the default validation error message is in English but you can override it by using \"errorMessage\"\r\n          // errorMessage: this.i18n.tr('INVALID_FLOAT', { maxDecimal: 2 }),\r\n          params: { decimalPlaces: 2 },\r\n        },\r\n        */\r\n      }, {\r\n        id: 'complete',\r\n        name: '% Complete',\r\n        field: 'percentComplete',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        formatter: Formatters.multiple,\r\n        type: FieldType.number,\r\n        editor: {\r\n          model: Editors.singleSelect,\r\n\r\n          // We can also add HTML text to be rendered (any bad script will be sanitized) but we have to opt-in, else it will be sanitized\r\n          enableRenderHtml: true,\r\n          collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, symbol: '<i class=\"fa fa-percent\" style=\"color:cadetblue\"></i>' })),\r\n          customStructure: {\r\n            value: 'value',\r\n            label: 'label',\r\n            labelSuffix: 'symbol'\r\n          },\r\n\r\n          // collection: Array.from(Array(101).keys()).map(k => ({ value: k, label: k, labelSuffix: '%' })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          collectionFilterBy: {\r\n            property: 'value',\r\n            value: 0,\r\n            operator: OperatorType.notEqual\r\n          },\r\n          elementOptions: {\r\n            maxHeight: 400\r\n          }\r\n        },\r\n        params: {\r\n          formatters: [Formatters.collectionEditor, Formatters.percentCompleteBar],\r\n        }\r\n      }, {\r\n        id: 'start',\r\n        name: 'Start',\r\n        field: 'start',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        editor: {\r\n          model: Editors.date\r\n        },\r\n      }, {\r\n        id: 'finish',\r\n        name: 'Finish',\r\n        field: 'finish',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        formatter: Formatters.dateIso,\r\n        sortable: true,\r\n        type: FieldType.date,\r\n        editor: {\r\n          model: Editors.date\r\n        },\r\n      }, {\r\n        id: 'cityOfOrigin', name: 'City of Origin', field: 'cityOfOrigin',\r\n        filterable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          placeholder: '&#128269; search city',\r\n\r\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\r\n          // use your own autocomplete options, instead of $.ajax, use http\r\n          // here we use $.ajax just because I'm not sure how to configure http with JSONP and CORS\r\n          editorOptions: {\r\n            minLength: 3,\r\n            source: (request, response) => {\r\n              $.ajax({\r\n                url: 'http://gd.geobytes.com/AutoCompleteCity',\r\n                dataType: 'jsonp',\r\n                data: {\r\n                  q: request.term\r\n                },\r\n                success: (data) => {\r\n                  response(data);\r\n                }\r\n              });\r\n            }\r\n          },\r\n        },\r\n        filter: {\r\n          model: Filters.autoComplete,\r\n          // placeholder: '&#128269; search city',\r\n\r\n          // We can use the autocomplete through 3 ways \"collection\", \"collectionAsync\" or with your own autocomplete options\r\n          // collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n\r\n          // OR use your own autocomplete options, instead of $.ajax, use http\r\n          // here we use $.ajax just because I'm not sure how to configure http with JSONP and CORS\r\n          filterOptions: {\r\n            minLength: 3,\r\n            source: (request, response) => {\r\n              $.ajax({\r\n                url: 'http://gd.geobytes.com/AutoCompleteCity',\r\n                dataType: 'jsonp',\r\n                data: {\r\n                  q: request.term\r\n                },\r\n                success: (data) => {\r\n                  response(data);\r\n                }\r\n              });\r\n            }\r\n          },\r\n        }\r\n      }, {\r\n        id: 'countryOfOrigin', name: 'Country of Origin', field: 'countryOfOrigin',\r\n        formatter: Formatters.complexObject,\r\n        dataKey: 'code',\r\n        labelKey: 'name',\r\n        type: FieldType.object,\r\n        filterable: true,\r\n        minWidth: 100,\r\n        editor: {\r\n          model: Editors.autoComplete,\r\n          customStructure: { label: 'name', value: 'code' },\r\n          collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n        },\r\n        filter: {\r\n          model: Filters.autoComplete,\r\n          customStructure: { label: 'name', value: 'code' },\r\n          collectionAsync: this.http.get(URL_COUNTRIES_COLLECTION),\r\n        }\r\n      }, {\r\n        id: 'effort-driven',\r\n        name: 'Effort Driven',\r\n        field: 'effortDriven',\r\n        minWidth: 70,\r\n        filterable: true,\r\n        type: FieldType.boolean,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n        },\r\n        formatter: Formatters.checkmark,\r\n        editor: {\r\n          model: Editors.checkbox,\r\n        },\r\n      }, {\r\n        id: 'prerequisites',\r\n        name: 'Prerequisites',\r\n        field: 'prerequisites',\r\n        minWidth: 100,\r\n        filterable: true,\r\n        formatter: taskFormatter,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        editor: {\r\n          collectionAsync: this.http.get<{ value: string; label: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          // OR a regular collection load\r\n          // collection: Array.from(Array(100).keys()).map(k => ({ value: k, prefix: 'Task', label: k })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          customStructure: {\r\n            label: 'label',\r\n            value: 'value',\r\n            labelPrefix: 'prefix',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' '\r\n          },\r\n          model: Editors.multipleSelect,\r\n        },\r\n        filter: {\r\n          collectionAsync: this.http.get<{ value: string; label: string; }[]>(URL_SAMPLE_COLLECTION_DATA),\r\n          // OR a regular collection load\r\n          // collection: Array.from(Array(100).keys()).map(k => ({ value: k, prefix: 'Task', label: k })),\r\n          collectionSortBy: {\r\n            property: 'label',\r\n            sortDesc: true\r\n          },\r\n          customStructure: {\r\n            label: 'label',\r\n            value: 'value',\r\n            labelPrefix: 'prefix',\r\n          },\r\n          collectionOptions: {\r\n            separatorBetweenTextLabels: ' '\r\n          },\r\n          model: Filters.multipleSelect,\r\n          operator: OperatorType.inContains,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      asyncEditorLoading: false,\r\n      autoEdit: this.isAutoEdit,\r\n      autoCommitEdit: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      editable: true,\r\n      enableCellNavigation: true,\r\n      enableColumnPicker: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      editCommandHandler: (item, column, editCommand) => {\r\n        this._commandQueue.push(editCommand);\r\n        editCommand.execute();\r\n      },\r\n      i18n: this.translate\r\n    };\r\n\r\n    this.dataset = this.mockData(NB_ITEMS);\r\n  }\r\n\r\n  /** Add a new row to the grid and refresh the Filter collection.\r\n   * Note that because Filter elements are always displayed on the screen, we need to tell the Filter,\r\n   * we do this via a Subject .next(), that it's collection got changed\r\n   * as for the Editor, there's nothing to do since the element is not shown and it will have latest collection next time it shows up\r\n   */\r\n  addItem() {\r\n    const lastRowIndex = this.dataset.length;\r\n    const newRows = this.mockData(1, lastRowIndex);\r\n\r\n    // wrap into a timer to simulate a backend async call\r\n    setTimeout(() => {\r\n      const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\r\n      if (requisiteColumnDef) {\r\n        const filterCollectionAsync = requisiteColumnDef.filter.collectionAsync;\r\n        const editorCollection = requisiteColumnDef.editor.collection;\r\n\r\n        if (Array.isArray(editorCollection)) {\r\n          // add the new row to the grid\r\n          this.angularGrid.gridService.addItemToDatagrid(newRows[0]);\r\n\r\n          // then refresh the Editor \"collection\", we have 2 ways of doing it\r\n\r\n          // Push to the Editor \"collection\"\r\n          editorCollection.push({ value: lastRowIndex, label: lastRowIndex, prefix: 'Task' });\r\n\r\n          // or replace entire \"collection\"\r\n          // durationColumnDef.editor.collection = [...collection, ...[{ value: lastRowIndex, label: lastRowIndex }]];\r\n\r\n          // for the Filter only, we have a trigger an RxJS/Subject change with the new collection\r\n          // we do this because Filter(s) are shown at all time, while on Editor it's unnecessary since they are only shown when opening them\r\n          if (filterCollectionAsync instanceof Subject) {\r\n            filterCollectionAsync.next(editorCollection);\r\n          }\r\n        }\r\n      }\r\n    }, 250);\r\n  }\r\n\r\n  /**\r\n   * Delete last inserted row.\r\n   * Note that because Filter elements are always displayed on the screen, we need to tell the Filter,\r\n   * we do this via a Subject .next(), that it's collection got changed\r\n   * as for the Editor, there's nothing to do since the element is not shown and it will have latest collection next time it shows up\r\n   */\r\n  deleteItem() {\r\n    const requisiteColumnDef = this.columnDefinitions.find((column: Column) => column.id === 'prerequisites');\r\n    if (requisiteColumnDef) {\r\n      const filterCollectionAsync = requisiteColumnDef.filter.collectionAsync;\r\n      const filterCollection = requisiteColumnDef.filter.collection;\r\n\r\n      if (Array.isArray(filterCollection)) {\r\n        // sort collection in descending order and take out last collection option\r\n        const selectCollectionObj = this.sortCollectionDescending(filterCollection).pop();\r\n\r\n        // then we will delete that item from the grid\r\n        this.angularGrid.gridService.deleteDataGridItemById(selectCollectionObj.value);\r\n\r\n        // for the Filter only, we have a trigger an RxJS/Subject change with the new collection\r\n        // we do this because Filter(s) are shown at all time, while on Editor it's unnecessary since they are only shown when opening them\r\n        if (filterCollectionAsync instanceof Subject) {\r\n          filterCollectionAsync.next(filterCollection);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sortCollectionDescending(collection) {\r\n    return collection.sort((item1, item2) => item1.value - item2.value);\r\n  }\r\n\r\n  mockData(itemCount, startingIndex = 0) {\r\n    // mock a dataset\r\n    const tempDataset = [];\r\n    for (let i = startingIndex; i < (startingIndex + itemCount); i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      tempDataset.push({\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0),\r\n        prerequisites: (i % 2 === 0) && i !== 0 && i < 12 ? [i, i - 1] : [],\r\n        countryOfOrigin: (i % 2) ? { code: 'CA', name: 'Canada' } : { code: 'US', name: 'United States' },\r\n        cityOfOrigin: (i % 2) ? 'Vancouver, BC, Canada' : 'Boston, MA, United States',\r\n      });\r\n    }\r\n    return tempDataset;\r\n  }\r\n\r\n  onCellChanged(e, args) {\r\n    this.updatedObject = args.item;\r\n  }\r\n\r\n  onCellClicked(e, args) {\r\n    const metadata = this.angularGrid.gridService.getColumnFromEventArguments(args);\r\n    console.log(metadata);\r\n\r\n    if (metadata.columnDef.id === 'edit') {\r\n      this.alertWarning = `open a modal window to edit: ${metadata.dataContext.title}`;\r\n\r\n      // highlight the row, to customize the color, you can change the SASS variable $row-highlight-background-color\r\n      this.angularGrid.gridService.highlightRow(args.row, 1500);\r\n\r\n      // you could also select the row, when using \"enableCellNavigation: true\", it automatically selects the row\r\n      // this.angularGrid.gridService.setSelectedRow(args.row);\r\n    } else if (metadata.columnDef.id === 'delete') {\r\n      if (confirm('Are you sure?')) {\r\n        this.angularGrid.gridService.deleteDataGridItemById(metadata.dataContext.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  onCellValidation(e, args) {\r\n    alert(args.validationResults.msg);\r\n  }\r\n\r\n  changeAutoCommit() {\r\n    this.gridOptions.autoCommitEdit = !this.gridOptions.autoCommitEdit;\r\n    this.gridObj.setOptions({\r\n      autoCommitEdit: this.gridOptions.autoCommitEdit\r\n    });\r\n    return true;\r\n  }\r\n\r\n  setAutoEdit(isAutoEdit) {\r\n    this.isAutoEdit = isAutoEdit;\r\n    this.gridObj.setOptions({ autoEdit: isAutoEdit }); // change the grid option dynamically\r\n    return true;\r\n  }\r\n\r\n  undo() {\r\n    const command = this._commandQueue.pop();\r\n    if (command && Slick.GlobalEditorLock.cancelCurrentEdit()) {\r\n      command.undo();\r\n      this.gridObj.gotoCell(command.row, command.cell, false);\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Column, FieldType, Formatter, Formatters, GridOption } from 'angular-slickgrid';\r\n\r\n// create my custom Formatter with the Formatter type\r\nconst myCustomCheckmarkFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) =>\r\n  value ? `<i class=\"fa fa-fire\" aria-hidden=\"true\"></i>` : '<i class=\"fa fa-snowflake-o\" aria-hidden=\"true\"></i>';\r\n\r\n@Component({\r\n  templateUrl: './grid-formatter.component.html'\r\n})\r\nexport class GridFormatterComponent implements OnInit {\r\n  title = 'Example 2: Grid with Formatters';\r\n  subTitle = `\r\n    Grid with Custom and/or included Slickgrid Formatters (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Formatters\" target=\"_blank\">Wiki docs</a>).\r\n    <ul>\r\n      <li>\r\n        Support Excel Copy Buffer (SlickGrid Copy Manager Plugin), you can use it by simply enabling \"enableExcelCopyBuffer\" flag.\r\n        Note that it will only evaluate Formatter when the \"exportWithFormatter\" flag is enabled (through \"ExportOptions\" or the column definition)\r\n      </li>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, width: 70 },\r\n      { id: 'phone', name: 'Phone Number using mask', field: 'phone', sortable: true, type: FieldType.number, minWidth: 100, formatter: Formatters.mask, params: { mask: '(000) 000-0000' } },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, minWidth: 90 },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, sortable: true, minWidth: 100 },\r\n      { id: 'percent2', name: '% Complete', field: 'percentComplete2', formatter: Formatters.progressBar, type: FieldType.number, sortable: true, minWidth: 100 },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\r\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, minWidth: 90, exportWithFormatter: true },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', formatter: myCustomCheckmarkFormatter, type: FieldType.number, sortable: true, minWidth: 100 }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableAutoResize: true,\r\n      enableExcelCopyBuffer: true\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        phone: this.generatePhoneNumber(),\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentComplete2: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  generatePhoneNumber(): string {\r\n    let phone = '';\r\n    for (let i = 0; i < 10; i++) {\r\n      phone += Math.round(Math.random() * 9) + '';\r\n    }\r\n    return phone;\r\n  }\r\n}\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { AngularGridInstance, Column, FieldType, Formatters, Filters, GridOption } from 'angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-frozen.component.html',\r\n  styleUrls: ['./grid-frozen.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class GridFrozenComponent implements OnInit {\r\n  title = 'Example 20: Pinned (frozen) Columns/Rows';\r\n  subTitle = `\r\n    This example demonstrates the use of Pinned (aka frozen) Columns and/or Rows<br/>\r\n    <ul>\r\n      <li>Option to pin any number of columns (left only) or rows</li>\r\n      <li>Option to pin the rows at the bottom instead of the top (default)</li>\r\n      <li>You can also dynamically any of these options, through SlickGrid \"setOptions()\"</li>\r\n      <li>Possibility to change the styling of the line border between pinned columns/rows</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  frozenColumnCount = 2;\r\n  frozenRowCount = 3;\r\n  isFrozenBottom = false;\r\n  gridObj: any;\r\n\r\n  ngOnInit(): void {\r\n    this.prepareDataGrid();\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridObj = angularGrid.slickGrid;\r\n  }\r\n\r\n  prepareDataGrid() {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'sel', name: '#', field: 'id',\r\n        minWidth: 40, width: 40, maxWidth: 40,\r\n        cannotTriggerInsert: true,\r\n        resizable: false,\r\n        unselectable: true,\r\n      },\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration', field: 'duration',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'percentComplete', name: '% Complete', field: 'percentComplete',\r\n        resizable: false,\r\n        minWidth: 130, width: 140,\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'effortDriven', name: 'Effort Driven', field: 'effortDriven',\r\n        minWidth: 100, width: 120,\r\n        formatter: Formatters.checkmark,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect\r\n        },\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title1', name: 'Title1', field: 'title1',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title2', name: 'Title2', field: 'title2',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title3', name: 'Title3', field: 'title3',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'title4', name: 'Title4', field: 'title4',\r\n        minWidth: 100, width: 120,\r\n        filterable: true,\r\n        sortable: true\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      alwaysShowVerticalScroll: false, // disable scroll since we don't want it to show on the left pinned columns\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      asyncEditorLoading: true,\r\n      forceFitColumns: false,\r\n      autoEdit: false,\r\n      frozenColumn: this.frozenColumnCount,\r\n      frozenRow: this.frozenRowCount,\r\n      // frozenBottom: true, // if you want to freeze the bottom instead of the top, you can enable this property\r\n      showHeaderRow: true,\r\n      syncColumnCellResize: false,\r\n    };\r\n\r\n    // mock a dataset\r\n    this.dataset = this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0),\r\n        title1: Math.round(Math.random() * 25),\r\n        title2: Math.round(Math.random() * 25),\r\n        title3: Math.round(Math.random() * 25),\r\n        title4: Math.round(Math.random() * 25),\r\n      };\r\n    }\r\n    return mockDataset;\r\n  }\r\n\r\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned columns */\r\n  changeFrozenColumnCount() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenColumn: this.frozenColumnCount\r\n      });\r\n    }\r\n  }\r\n\r\n  /** change dynamically, through slickgrid \"setOptions()\" the number of pinned rows */\r\n  changeFrozenRowCount() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenRow: this.frozenRowCount\r\n      });\r\n    }\r\n  }\r\n\r\n  /** toggle dynamically, through slickgrid \"setOptions()\" the top/bottom pinned location */\r\n  toggleFrozenBottomRows() {\r\n    if (this.gridObj && this.gridObj.setOptions) {\r\n      this.gridObj.setOptions({\r\n        frozenBottom: !this.isFrozenBottom\r\n      });\r\n      this.isFrozenBottom = !this.isFrozenBottom; // toggle the variable\r\n    }\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Aggregators,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  GroupTotalFormatters,\r\n  SortDirectionNumber,\r\n  Sorters\r\n} from 'angular-slickgrid';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Injectable()\r\n@Component({\r\n  templateUrl: './grid-grouping.component.html'\r\n})\r\nexport class GridGroupingComponent implements OnInit, OnDestroy {\r\n  title = 'Example 14: Grouping';\r\n  subTitle = `\r\n  (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grouping-&-Aggregators\" target=\"_blank\">Wiki docs</a>)\r\n  <ul>\r\n    <li>\r\n    Fully dynamic and interactive multi-level grouping with filtering and aggregates over 50'000 items\r\n    </li>\r\n    <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\r\n  </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n  processing = false;\r\n  exportBeforeSub: Subscription;\r\n  exportAfterSub: Subscription;\r\n\r\n  constructor() {}\r\n\r\n  ngOnDestroy() {\r\n    this.exportBeforeSub.unsubscribe();\r\n    this.exportAfterSub.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'sel', name: '#', field: 'num', width: 40,\r\n        maxWidth: 70,\r\n        resizable: true,\r\n        filterable: true,\r\n        selectable: false,\r\n        focusable: false\r\n      },\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        width: 50,\r\n        minWidth: 50,\r\n        cssClass: 'cell-title',\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration', field: 'duration',\r\n        minWidth: 50, width: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, operator: '>=' },\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotals,\r\n        params: { groupFormatterPrefix: 'Total: ' }\r\n      },\r\n      {\r\n        id: '%', name: '% Complete', field: 'percentComplete',\r\n        minWidth: 70, width: 90,\r\n        formatter: Formatters.percentCompleteBar,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundSlider },\r\n        sortable: true,\r\n        groupTotalsFormatter: GroupTotalFormatters.avgTotalsPercentage,\r\n        params: { groupFormatterPrefix: '<i>Avg</i>: ' }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        minWidth: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        sortable: true,\r\n        type: FieldType.dateIso,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        minWidth: 60,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundDate },\r\n        sortable: true,\r\n        type: FieldType.dateIso,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true\r\n      },\r\n      {\r\n        id: 'cost', name: 'Cost', field: 'cost',\r\n        minWidth: 70,\r\n        width: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.compoundInput },\r\n        type: FieldType.number,\r\n        sortable: true,\r\n        exportWithFormatter: true,\r\n        formatter: Formatters.dollar,\r\n        groupTotalsFormatter: GroupTotalFormatters.sumTotalsDollar,\r\n        params: { groupFormatterPrefix: '<b>Total</b>: ' /*, groupFormatterSuffix: ' USD'*/ }\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven',\r\n        minWidth: 20, width: 80, maxWidth: 80,\r\n        cssClass: 'cell-effort-driven',\r\n        field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          },\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableFiltering: true,\r\n      enableGrouping: true,\r\n      exportOptions: {\r\n        sanitizeDataExport: true\r\n      }\r\n    };\r\n\r\n    this.loadData(500);\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n\r\n    // display a spinner while downloading\r\n    this.exportBeforeSub = this.angularGrid.exportService.onGridBeforeExportToFile.subscribe(() => this.processing = true);\r\n    this.exportAfterSub = this.angularGrid.exportService.onGridAfterExportToFile.subscribe(() => this.processing = false);\r\n  }\r\n\r\n  loadData(rowCount: number) {\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      this.dataset[i] = {\r\n        id: 'id_' + i,\r\n        num: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        cost: (i % 33 === 0) ? null : Math.round(Math.random() * 10000) / 100,\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  gridReady(grid) {\r\n    this.gridObj = grid;\r\n  }\r\n\r\n  dataviewReady(dataview) {\r\n    this.dataviewObj = dataview;\r\n  }\r\n\r\n  clearGrouping() {\r\n    this.dataviewObj.setGrouping([]);\r\n  }\r\n\r\n  collapseAllGroups() {\r\n    this.dataviewObj.collapseAllGroups();\r\n  }\r\n\r\n  expandAllGroups() {\r\n    this.dataviewObj.expandAllGroups();\r\n  }\r\n\r\n  groupByDuration() {\r\n    this.dataviewObj.setGrouping({\r\n      getter: 'duration',\r\n      formatter: (g) => {\r\n        return `Duration:  ${g.value} <span style=\"color:green\">(${g.count} items)</span>`;\r\n      },\r\n      aggregators: [\r\n        new Aggregators.Avg('percentComplete'),\r\n        new Aggregators.Sum('cost')\r\n      ],\r\n      comparer: (a, b) => Sorters.numeric(a.value, b.value, SortDirectionNumber.asc),\r\n      aggregateCollapsed: false,\r\n      lazyTotalsCalculation: true\r\n    });\r\n  }\r\n\r\n  groupByDurationOrderByCount(aggregateCollapsed) {\r\n    this.dataviewObj.setGrouping({\r\n      getter: 'duration',\r\n      formatter: (g) => {\r\n        return `Duration:  ${g.value} <span style=\"color:green\">(${g.count} items)</span>`;\r\n      },\r\n      comparer: (a, b) => {\r\n        return a.count - b.count;\r\n      },\r\n      aggregators: [\r\n        new Aggregators.Avg('percentComplete'),\r\n        new Aggregators.Sum('cost')\r\n      ],\r\n      aggregateCollapsed,\r\n      lazyTotalsCalculation: true\r\n    });\r\n  }\r\n\r\n  groupByDurationEffortDriven() {\r\n    this.dataviewObj.setGrouping([\r\n      {\r\n        getter: 'duration',\r\n        formatter: (g) => {\r\n          return `Duration:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\r\n        },\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'effortDriven',\r\n        formatter: (g) => {\r\n          return `Effort-Driven:  ${(g.value ? 'True' : 'False')} <span style=\"color:green\">(${g.count} items)</span>`;\r\n        },\r\n        aggregators: [\r\n          new Aggregators.Avg('percentComplete'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        collapsed: true,\r\n        lazyTotalsCalculation: true\r\n      }\r\n    ]);\r\n  }\r\n\r\n  groupByDurationEffortDrivenPercent() {\r\n    this.dataviewObj.setGrouping([\r\n      {\r\n        getter: 'duration',\r\n        formatter: (g) => {\r\n          return `Duration:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\r\n        },\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'effortDriven',\r\n        formatter: (g) => {\r\n          return `Effort-Driven:  ${(g.value ? 'True' : 'False')}  <span style=\"color:green\">(${g.count} items)</span>`;\r\n        },\r\n        aggregators: [\r\n          new Aggregators.Sum('duration'),\r\n          new Aggregators.Sum('cost')\r\n        ],\r\n        lazyTotalsCalculation: true\r\n      },\r\n      {\r\n        getter: 'percentComplete',\r\n        formatter: (g) => {\r\n          return `% Complete:  ${g.value}  <span style=\"color:green\">(${g.count} items)</span>`;\r\n        },\r\n        aggregators: [\r\n          new Aggregators.Avg('percentComplete')\r\n        ],\r\n        aggregateCollapsed: true,\r\n        collapsed: true,\r\n        lazyTotalsCalculation: true\r\n      }\r\n    ]);\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Column, GridOption } from 'angular-slickgrid';\r\n\r\n// create a custom Formatter to highlight negative values in red\r\nlet columnsWithHighlightingById = {};\r\nconst highlightingFormatter = (row, cell, value, columnDef, dataContext) => {\r\n  if (columnsWithHighlightingById && columnsWithHighlightingById[columnDef.id] && value < 0) {\r\n    return `<div style=\"color:red; font-weight:bold;\">${value}</div>`;\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\n@Component({\r\n  templateUrl: './grid-headerbutton.component.html'\r\n})\r\nexport class GridHeaderButtonComponent implements OnInit, OnDestroy {\r\n  title = 'Example 7: Header Button Plugin';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Plugins.HeaderButtons</b> plugin to easily add buttons to colum headers.\r\n    These buttons can be specified directly in the column definition, and are very easy to configure and use.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons\" target=\"_blank\">Wiki docs</a>)\r\n    <ul>\r\n      <li>Resize the 1st column to see all icon/command</li>\r\n      <li>Mouse hover the 2nd column to see it's icon/command</li>\r\n      <li>For all the other columns, click on top-right red circle icon to enable highlight of negative numbers.</li>\r\n    </ul>\r\n  `;\r\n\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n  visibleColumns: Column[];\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [];\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      enableHeaderButton: true,\r\n      enableHeaderMenu: false,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableFiltering: false,\r\n      enableCellNavigation: true,\r\n      headerButton: {\r\n        onCommand: (e, args) => {\r\n          const column = args.column;\r\n          const button = args.button;\r\n          const command = args.command;\r\n          if (!columnsWithHighlightingById) {\r\n            columnsWithHighlightingById = {};\r\n          }\r\n\r\n          if (command === 'toggle-highlight') {\r\n            if (button.cssClass === 'fa fa-circle red') {\r\n              delete columnsWithHighlightingById[column.id];\r\n              button.cssClass = 'fa fa-circle-o red faded';\r\n              button.tooltip = 'Highlight negative numbers.';\r\n            } else {\r\n              columnsWithHighlightingById[column.id] = true;\r\n              button.cssClass = 'fa fa-circle red';\r\n              button.tooltip = 'Remove highlight.';\r\n            }\r\n\r\n            this.gridObj.invalidate();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    columnsWithHighlightingById = null;\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    for (let i = 0; i < 9; i++) {\r\n      this.columnDefinitions.push({\r\n        id: i,\r\n        name: 'Column' + (i + 1),\r\n        field: i + '',\r\n        width: 100, // have the 2 first columns wider\r\n        sortable: true,\r\n        formatter: highlightingFormatter,\r\n        header: {\r\n          buttons: [\r\n            {\r\n              cssClass: 'fa fa-circle-o red faded',\r\n              command: 'toggle-highlight',\r\n              tooltip: 'Highlight negative numbers.'\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    }\r\n\r\n    // Set multiple buttons on the first column to demonstrate overflow.\r\n    this.columnDefinitions[0].name = 'Resize me!';\r\n    this.columnDefinitions[0].header = {\r\n      buttons: [\r\n        {\r\n          cssClass: 'fa fa-tag',\r\n          handler: (e) => {\r\n            alert('Tag');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-comment',\r\n          handler: (e) => {\r\n            alert('Comment');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-info-circle',\r\n          handler: (e) => {\r\n            alert('Info');\r\n          }\r\n        },\r\n        {\r\n          cssClass: 'fa fa-question-circle',\r\n          handler: (e) => {\r\n            alert('Help');\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Set a button on the second column to demonstrate hover.\r\n    this.columnDefinitions[1].name = 'Hover me!';\r\n    this.columnDefinitions[1].header = {\r\n      buttons: [\r\n        {\r\n          cssClass: 'fa fa-question-circle',\r\n          showOnHover: true,\r\n          tooltip: 'This button only appears on hover.',\r\n          handler: (e) => {\r\n            alert('Help');\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 100; i++) {\r\n      const d = (mockDataset[i] = {});\r\n      d['id'] = i;\r\n      for (let j = 0; j < this.columnDefinitions.length; j++) {\r\n        d[j] = Math.round(Math.random() * 10) - 5;\r\n      }\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  gridReady(grid) {\r\n    this.gridObj = grid;\r\n  }\r\n  dataviewReady(dataview) {\r\n    this.dataviewObj = dataview;\r\n  }\r\n}\r\n","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { AngularGridInstance, Column, ColumnSort, GridOption } from 'angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-headermenu.component.html'\r\n})\r\nexport class GridHeaderMenuComponent implements OnInit {\r\n  title = 'Example 8: Header Menu Plugin';\r\n  subTitle = `\r\n    This example demonstrates using the <b>Slick.Plugins.HeaderMenu</b> plugin to easily add menus to colum headers.<br/>\r\n    These menus can be specified directly in the column definition, and are very easy to configure and use.\r\n    (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Header-Menu-&-Header-Buttons\" target=\"_blank\">Wiki docs</a>)\r\n    <ul>\r\n      <li>Now enabled by default in the Global Grid Options, it will add the default commands of (hide column, sort asc/desc)</li>\r\n      <li>Hover over any column header to see an arrow showing up on the right</li>\r\n      <li>Try Sorting (multi-sort) the 2 columns \"Duration\" and \"% Complete\" (the other ones are disabled)</li>\r\n      <li>Try hiding any columns (you use the \"Column Picker\" plugin by doing a right+click on the header to show the column back)</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  gridObj: any;\r\n  dataviewObj: any;\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'title' },\r\n      { id: 'duration', name: 'Duration', field: 'duration', sortable: true },\r\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true },\r\n      { id: 'start', name: 'Start', field: 'start' },\r\n      { id: 'finish', name: 'Finish', field: 'finish' },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven' }\r\n    ];\r\n\r\n    this.columnDefinitions.forEach((columnDef) => {\r\n      columnDef.header = {\r\n        menu: {\r\n          items: [\r\n            {\r\n              iconCssClass: 'fa fa-sort-asc',\r\n              title: 'Sort Ascending',\r\n              disabled: !columnDef.sortable,\r\n              command: 'sort-asc'\r\n            },\r\n            {\r\n              iconCssClass: 'fa fa-sort-desc',\r\n              title: 'Sort Descending',\r\n              disabled: !columnDef.sortable,\r\n              command: 'sort-desc'\r\n            },\r\n            {\r\n              iconCssClass: 'fa fa-times',\r\n              title: 'Hide Column',\r\n              command: 'hide'\r\n            },\r\n            {\r\n              iconCssClass: 'fa fa-question-circle',\r\n              title: 'Help',\r\n              command: 'help'\r\n            }\r\n          ]\r\n        }\r\n      };\r\n    });\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      enableHeaderMenu: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableFiltering: false,\r\n      enableCellNavigation: true,\r\n      headerMenu: {\r\n        onCommand: (e, args) => {\r\n          if (args.command === 'hide') {\r\n            this.angularGrid.pluginService.hideColumn(args.column);\r\n            this.angularGrid.pluginService.autoResizeColumns();\r\n          } else if (args.command === 'sort-asc' || args.command === 'sort-desc') {\r\n            // get previously sorted columns\r\n            const cols: ColumnSort[] = this.angularGrid.sortService.getPreviousColumnSorts(args.column.id + '');\r\n\r\n            // add to the column array, the column sorted by the header menu\r\n            cols.push({ sortCol: args.column, sortAsc: (args.command === 'sort-asc') });\r\n            this.angularGrid.sortService.onLocalSortChanged(this.gridObj, this.dataviewObj, cols);\r\n\r\n            // update the this.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI\r\n            const newSortColumns: ColumnSort[] = cols.map((col) => {\r\n              return { columnId: col.sortCol.id, sortAsc: col.sortAsc };\r\n            });\r\n            this.gridObj.setSortColumns(newSortColumns); // add sort icon in UI\r\n          } else {\r\n            alert('Command: ' + args.command);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // Set up some test columns.\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 25) + ' days',\r\n        percentComplete: Math.round(Math.random() * 100),\r\n        start: '01/01/2009',\r\n        finish: '01/05/2009',\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    this.dataset = mockDataset;\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  gridReady(grid) {\r\n    this.gridObj = grid;\r\n  }\r\n  dataviewReady(dataview) {\r\n    this.dataviewObj = dataview;\r\n  }\r\n}\r\n","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  DelimiterType,\r\n  FieldType,\r\n  FileType,\r\n  Filters,\r\n  Formatter,\r\n  Formatters,\r\n  GridOption\r\n} from 'angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-localization.component.html'\r\n})\r\n@Injectable()\r\nexport class GridLocalizationComponent implements OnInit {\r\n  title = 'Example 12: Localization (i18n)';\r\n  subTitle = `Support multiple locales with the ngx-translate plugin, following these steps (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Localization\" target=\"_blank\">Wiki docs</a>)\r\n  <ol class=\"small\">\r\n    <li>You first need to \"enableTranslate\" in the Grid Options</li>\r\n    <li>In the Column Definitions, you have following options</li>\r\n    <ul>\r\n      <li>To translate a header title, use \"headerKey\" with a translate key (headerKey: 'TITLE')</li>\r\n      <li>For the cell values, you need to use a Formatter, there's 2 ways of doing it</li>\r\n      <ul>\r\n        <li>formatter: myCustomTranslateFormatter <b>&lt;= \"Title\" column uses it</b></li>\r\n        <li>formatter: Formatters.translate, i18n: this.translateService <b>&lt;= \"Completed\" column uses it</b></li>\r\n      </ul>\r\n    </ul>\r\n    <li>For date localization, you need to create your own custom formatter. </li>\r\n    <ul>\r\n      <li>You can easily implement logic to switch between Formatters \"dateIso\" or \"dateUs\", depending on current locale.</li>\r\n    </ul>\r\n    <li>For the Select (dropdown) filter, you can fill in the \"labelKey\" property, if found it will use it, else it will use \"label\"</li>\r\n      <ul>\r\n        <li>What if your select options have totally different value/label pair? In this case, you can use the <b>customStructure: { label: 'customLabel', value: 'customValue'}</b> to change the property name(s) to use.'</li>\r\n        <li>What if you want to use \"customStructure\" and translation? Simply pass this flag <b>enableTranslateLabel: true</b></li>\r\n        <li>More info on the Select Filter <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Select-Filter\" target=\"_blank\">Wiki page</a>\r\n      </ul>\r\n    <li>For more info about \"Download to File\", read the <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Export-to-File\" target=\"_blank\">Wiki page</a></li>\r\n    </ol>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  selectedLanguage: string;\r\n  duplicateTitleHeaderCount = 1;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'title', name: 'Title', field: 'id', headerKey: 'TITLE', formatter: this.taskTranslateFormatter, sortable: true, minWidth: 100, filterable: true, params: { useFormatterOuputToFilter: true } },\r\n      { id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80 },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration', headerKey: 'DURATION', sortable: true,\r\n        formatter: Formatters.percentCompleteBar, minWidth: 100,\r\n        filterable: true,\r\n        filter: { model: Filters.slider, /* operator: '>=',*/ params: { hideSliderNumber: true } }\r\n      },\r\n      { id: 'start', name: 'Start', field: 'start', headerKey: 'START', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\r\n      { id: 'finish', name: 'Finish', field: 'finish', headerKey: 'FINISH', formatter: Formatters.dateIso, outputType: FieldType.dateIso, type: FieldType.date, minWidth: 100, filterable: true, filter: { model: Filters.compoundDate } },\r\n      { id: 'completedBool', name: 'Completed', field: 'completedBool', headerKey: 'COMPLETED', minWidth: 100,\r\n        sortable: true,\r\n        formatter: Formatters.checkmark,\r\n        exportCustomFormatter: Formatters.translateBoolean,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [ { value: '', label: '' }, { value: true, labelKey: 'TRUE' }, { value: false, labelKey: 'FALSE' } ],\r\n          model: Filters.singleSelect,\r\n          enableTranslateLabel: true,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      },\r\n      { id: 'completed', name: 'Completed', field: 'completed', headerKey: 'COMPLETED', formatter: Formatters.translate, sortable: true,\r\n        minWidth: 100,\r\n        exportWithFormatter: true, // you can set this property in the column definition OR in the grid options, column def has priority over grid options\r\n        filterable: true,\r\n        filter: {\r\n          collection: [ { value: '', label: '' }, { value: 'TRUE', labelKey: 'TRUE' }, { value: 'FALSE', labelKey: 'FALSE' } ],\r\n          collectionSortBy: {\r\n            property: 'labelKey' // will sort by translated value since \"enableTranslateLabel\" is true\r\n          },\r\n          enableTranslateLabel: true,\r\n          model: Filters.singleSelect,\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          }\r\n        }\r\n      }\r\n      // OR via your own custom translate formatter\r\n      // { id: 'completed', name: 'Completed', field: 'completed', headerKey: 'COMPLETED', formatter: translateFormatter, sortable: true, minWidth: 100 }\r\n    ];\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableAutoResize: true,\r\n      enableExcelCopyBuffer: true,\r\n      enableFiltering: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate,\r\n      exportOptions: {\r\n        // set at the grid option level, meaning all column will evaluate the Formatter (when it has a Formatter defined)\r\n        exportWithFormatter: true,\r\n        sanitizeDataExport: true\r\n      },\r\n      gridMenu: {\r\n        hideExportCsvCommand: false,           // false by default, so it's optional\r\n        hideExportTextDelimitedCommand: false  // true by default, so if you want it, you will need to disable the flag\r\n      }\r\n    };\r\n\r\n    this.loadData();\r\n  }\r\n\r\n  // mock a dataset\r\n  loadData() {\r\n    this.dataset = [];\r\n    for (let i = 0; i < 1000; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 30);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n\r\n      this.dataset[i] = {\r\n        id: i,\r\n        description: (i % 5) ? 'desc ' + i : '🚀🦄 español', // also add some random to test NULL field\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        completedBool: (i % 5 === 0) ? true : false,\r\n        completed: (i % 5 === 0) ? 'TRUE' : 'FALSE'\r\n      };\r\n    }\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  dynamicallyAddTitleHeader() {\r\n    const newCol = { id: `title${this.duplicateTitleHeaderCount++}`, field: 'id', headerKey: 'TITLE', formatter: this.taskTranslateFormatter, sortable: true, minWidth: 100, filterable: true, params: { useFormatterOuputToFilter: true } };\r\n    this.columnDefinitions.push(newCol);\r\n    this.columnDefinitions = this.columnDefinitions.slice();\r\n  }\r\n\r\n  exportToFile(type = 'csv') {\r\n    this.angularGrid.exportService.exportToFile({\r\n      delimiter: (type === 'csv') ? DelimiterType.comma : DelimiterType.tab,\r\n      filename: 'myExport',\r\n      format: (type === 'csv') ? FileType.csv : FileType.txt\r\n    });\r\n  }\r\n\r\n  switchLanguage() {\r\n    this.selectedLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.translate.use(this.selectedLanguage);\r\n  }\r\n\r\n  // create a custom translate Formatter\r\n  taskTranslateFormatter: Formatter = (row, cell, value, columnDef, dataContext) => {\r\n    return this.translate.instant('TASK_X', { x: value });\r\n  }\r\n}\r\n","import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Column, FieldType, Filters, GridOdataService, GridOption, Statistic } from 'angular-slickgrid';\r\n\r\nconst defaultPageSize = 20;\r\nconst sampleDataRoot = 'assets/data';\r\n\r\n@Component({\r\n  templateUrl: './grid-odata.component.html'\r\n})\r\n@Injectable()\r\nexport class GridOdataComponent implements OnInit {\r\n  title = 'Example 5: Grid connected to Backend Server with OData';\r\n  subTitle = `\r\n    Sorting/Paging connected to a Backend OData Service (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/OData\" target=\"_blank\">Wiki docs</a>).\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Only \"Name\" field is sortable for the demo (because we use JSON files), however \"multiColumnSort: true\" is also supported</li>\r\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\r\n      <ul>\r\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\r\n        <li>The other operators can be used on column type number for example: \">=100\" (bigger or equal than 100)</li>\r\n      </ul>\r\n      <li>OData Service could be replaced by other Service type in the future (GraphQL or whichever you provide)</li>\r\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki - Grid Preset</a>\r\n    </ul>\r\n  `;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset = [];\r\n  statistics: Statistic;\r\n\r\n  odataQuery = '';\r\n  processing = true;\r\n  status = { text: 'processing...', class: 'alert alert-danger' };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'name', name: 'Name', field: 'name', sortable: true, type: FieldType.string,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        }\r\n      },\r\n      { id: 'gender', name: 'Gender', field: 'gender', filterable: true, sortable: true,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [ { value: '', label: '' }, { value: 'male', label: 'male' }, { value: 'female', label: 'female' } ]\r\n        }\r\n      },\r\n      { id: 'company', name: 'Company', field: 'company' }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      pagination: {\r\n        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n        pageSize: defaultPageSize,\r\n        totalItems: 0\r\n      },\r\n      backendServiceApi: {\r\n        service: new GridOdataService(),\r\n        preProcess: () => this.displaySpinner(true),\r\n        process: (query) => this.getCustomerApiCall(query),\r\n        postProcess: (response) => {\r\n          this.statistics = response.statistics;\r\n          this.displaySpinner(false);\r\n          this.getCustomerCallback(response);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  displaySpinner(isProcessing) {\r\n    this.processing = isProcessing;\r\n    this.status = (isProcessing)\r\n      ? { text: 'processing...', class: 'alert alert-danger' }\r\n      : { text: 'done', class: 'alert alert-success' };\r\n  }\r\n\r\n  getCustomerCallback(data) {\r\n    // totalItems property needs to be filled for pagination to work correctly\r\n    // however we need to force Angular to do a dirty check, doing a clone object will do just that\r\n    this.gridOptions.pagination.totalItems = data['totalRecordCount'];\r\n    if (this.statistics) {\r\n      this.statistics.totalItemCount = data['totalRecordCount'];\r\n    }\r\n    this.gridOptions = Object.assign({}, this.gridOptions);\r\n\r\n    // once pagination totalItems is filled, we can update the dataset\r\n    this.dataset = data['items'];\r\n    this.odataQuery = data['query'];\r\n  }\r\n\r\n  getCustomerApiCall(query) {\r\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\r\n    // for the demo purpose, we will call a mock WebAPI function\r\n    return this.getCustomerDataApiMock(query);\r\n  }\r\n\r\n  /** This function is only here to mock a WebAPI call (since we are using a JSON file for the demo)\r\n   *  in your case the getCustomer() should be a WebAPI function returning a Promise\r\n   */\r\n  getCustomerDataApiMock(query) {\r\n    // the mock is returning a Promise, just like a WebAPI typically does\r\n    return new Promise((resolve, reject) => {\r\n      const queryParams = query.toLowerCase().split('&');\r\n      let top: number;\r\n      let skip = 0;\r\n      let orderBy = '';\r\n      let countTotalItems = 100;\r\n      const columnFilters = {};\r\n\r\n      for (const param of queryParams) {\r\n        if (param.includes('$top=')) {\r\n          top = +(param.substring('$top='.length));\r\n        }\r\n        if (param.includes('$skip=')) {\r\n          skip = +(param.substring('$skip='.length));\r\n        }\r\n        if (param.includes('$orderby=')) {\r\n          orderBy = param.substring('$orderby='.length);\r\n        }\r\n        if (param.includes('$filter=')) {\r\n          const filterBy = param.substring('$filter='.length).replace('%20', ' ');\r\n          if (filterBy.includes('substringof')) {\r\n            const filterMatch = filterBy.match(/substringof\\('(.*?)',([a-zA-Z ]*)/);\r\n            const fieldName = filterMatch[2].trim();\r\n            columnFilters[fieldName] = {\r\n              type: 'substring',\r\n              term: filterMatch[1].trim()\r\n            };\r\n          }\r\n          if (filterBy.includes('eq')) {\r\n            const filterMatch = filterBy.match(/([a-zA-Z ]*) eq '(.*?)'/);\r\n            const fieldName = filterMatch[1].trim();\r\n            columnFilters[fieldName] = {\r\n              type: 'equal',\r\n              term: filterMatch[2].trim()\r\n            };\r\n          }\r\n          if (filterBy.includes('startswith')) {\r\n            const filterMatch = filterBy.match(/startswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\r\n            const fieldName = filterMatch[1].trim();\r\n            columnFilters[fieldName] = {\r\n              type: 'starts',\r\n              term: filterMatch[2].trim()\r\n            };\r\n          }\r\n          if (filterBy.includes('endswith')) {\r\n            const filterMatch = filterBy.match(/endswith\\(([a-zA-Z ]*),\\s?'(.*?)'/);\r\n            const fieldName = filterMatch[1].trim();\r\n            columnFilters[fieldName] = {\r\n              type: 'ends',\r\n              term: filterMatch[2].trim()\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      const sort = orderBy.includes('asc')\r\n        ? 'ASC'\r\n        : orderBy.includes('desc')\r\n          ? 'DESC'\r\n          : '';\r\n\r\n      let url;\r\n      switch (sort) {\r\n        case 'ASC':\r\n          url = `${sampleDataRoot}/customers_100_ASC.json`;\r\n          break;\r\n        case 'DESC':\r\n          url = `${sampleDataRoot}/customers_100_DESC.json`;\r\n          break;\r\n        default:\r\n          url = `${sampleDataRoot}/customers_100.json`;\r\n          break;\r\n      }\r\n\r\n      this.http.get(url).subscribe(data => {\r\n        const dataArray = <any[]> data;\r\n\r\n        // Read the result field from the JSON response.\r\n        const firstRow = skip;\r\n        let filteredData = dataArray;\r\n        if (columnFilters) {\r\n          for (const columnId in columnFilters) {\r\n            if (columnFilters.hasOwnProperty(columnId)) {\r\n              filteredData = filteredData.filter(column => {\r\n                const filterType = columnFilters[columnId].type;\r\n                const searchTerm = columnFilters[columnId].term;\r\n                let colId = columnId;\r\n                if (columnId && columnId.indexOf(' ') !== -1) {\r\n                  const splitIds = columnId.split(' ');\r\n                  colId = splitIds[splitIds.length - 1];\r\n                }\r\n                const filterTerm = column[colId];\r\n                if (filterTerm) {\r\n                  switch (filterType) {\r\n                    case 'equal': return filterTerm.toLowerCase() === searchTerm;\r\n                    case 'ends': return filterTerm.toLowerCase().endsWith(searchTerm);\r\n                    case 'starts': return filterTerm.toLowerCase().startsWith(searchTerm);\r\n                    case 'substring': return filterTerm.toLowerCase().includes(searchTerm);\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          }\r\n          countTotalItems = filteredData.length;\r\n        }\r\n        const updatedData = filteredData.slice(firstRow, firstRow + top);\r\n\r\n        setTimeout(() => {\r\n          resolve({ items: updatedData, totalRecordCount: countTotalItems, query });\r\n        }, 500);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Component, Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GraphqlResult,\r\n  GraphqlService,\r\n  GraphqlServiceOption,\r\n  GridOption,\r\n  OperatorType,\r\n  SortDirection,\r\n  Statistic\r\n} from 'angular-slickgrid'; \r\nimport { Subscription } from 'rxjs';\r\n\r\nconst defaultPageSize = 20;\r\nconst GRAPHQL_QUERY_DATASET_NAME = 'users';\r\n\r\n@Component({\r\n  templateUrl: './grid-graphql.component.html'\r\n})\r\n@Injectable()\r\nexport class GridGraphqlComponent implements OnInit, OnDestroy {\r\n  title = 'Example 6: Grid connected to Backend Server with GraphQL';\r\n  subTitle = `\r\n    Sorting/Paging connected to a Backend GraphQL Service (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/GraphQL\" target=\"_blank\">Wiki docs</a>).\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li><span class=\"red\">(*) NO DATA SHOWING</span> - just change Filters &amp; Pages and look at the \"GraphQL Query\" changing :)</li>\r\n      <li>Only \"Name\" field is sortable for the demo (because we use JSON files), however \"multiColumnSort: true\" is also supported</li>\r\n      <li>String column also support operator (>, >=, <, <=, <>, !=, =, ==, *)\r\n      <ul>\r\n        <li>The (*) can be used as startsWith (ex.: \"abc*\" => startsWith \"abc\") / endsWith (ex.: \"*xyz\" => endsWith \"xyz\")</li>\r\n        <li>The other operators can be used on column type number for example: \">=100\" (bigger or equal than 100)</li>\r\n      </ul>\r\n      <li>You can also preload a grid with certain \"presets\" like Filters / Sorters / Pagination <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki - Grid Preset</a>\r\n    </ul>\r\n  `;\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset = [];\r\n\r\n  graphqlQuery = '';\r\n  processing = true;\r\n  status = { text: 'processing...', class: 'alert alert-danger' };\r\n  isWithCursor = false;\r\n  selectedLanguage: string;\r\n  gridStateSub: Subscription;\r\n  statistics: Statistic;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.gridStateSub.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.columnDefinitions = [\r\n      { id: 'name', field: 'name', headerKey: 'NAME', filterable: true, sortable: true, type: FieldType.string, width: 60 },\r\n      {\r\n        id: 'gender', field: 'gender', headerKey: 'GENDER', filterable: true, sortable: true, width: 60,\r\n        filter: {\r\n          model: Filters.singleSelect,\r\n          collection: [{ value: '', label: '' }, { value: 'male', label: 'male', labelKey: 'MALE' }, { value: 'female', label: 'female', labelKey: 'FEMALE' }]\r\n        }\r\n      },\r\n      {\r\n        id: 'company', field: 'company', headerKey: 'COMPANY', width: 60,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          model: Filters.multipleSelect,\r\n          collection: [{ value: 'acme', label: 'Acme'}, { value: 'abc', label: 'Company ABC'}, { value: 'xyz', label: 'Company XYZ'}]\r\n        }\r\n      },\r\n      { id: 'billing.address.street', field: 'billing.address.street', headerKey: 'BILLING.ADDRESS.STREET', width: 60, filterable: true, sortable: true },\r\n      {\r\n        id: 'billing.address.zip', field: 'billing.address.zip', headerKey: 'BILLING.ADDRESS.ZIP', width: 60,\r\n        type: FieldType.number,\r\n        filterable: true, sortable: true,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        },\r\n        formatter: Formatters.multiple, params: { formatters: [Formatters.complexObject, Formatters.translate] } },\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      enableAutoResize: false,\r\n      enableFiltering: true,\r\n      enableCellNavigation: true,\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate,\r\n      gridMenu: {\r\n        resizeOnShowHeaderRow: true,\r\n      },\r\n      pagination: {\r\n        pageSizes: [10, 15, 20, 25, 30, 40, 50, 75, 100],\r\n        pageSize: defaultPageSize,\r\n        totalItems: 0\r\n      },\r\n      presets: {\r\n        // you can also type operator as string, e.g.: operator: 'EQ'\r\n        filters: [\r\n          { columnId: 'gender', searchTerms: ['male'], operator: OperatorType.equal },\r\n          { columnId: 'name', searchTerms: ['John Doe'], operator: OperatorType.contains },\r\n          { columnId: 'company', searchTerms: ['xyz'], operator: 'IN' }\r\n        ],\r\n        sorters: [\r\n          // direction can typed as 'asc' (uppercase or lowercase) and/or use the SortDirection type\r\n          { columnId: 'name', direction: 'asc' },\r\n          { columnId: 'company', direction: SortDirection.DESC }\r\n        ],\r\n        pagination: { pageNumber: 2, pageSize: 20 }\r\n      },\r\n      backendServiceApi: {\r\n        service: new GraphqlService(),\r\n        options: this.getBackendOptions(this.isWithCursor),\r\n        // you can define the onInit callback OR enable the \"executeProcessCommandOnInit\" flag in the service init\r\n        // onInit: (query) => this.getCustomerApiCall(query)\r\n        preProcess: () => this.displaySpinner(true),\r\n        process: (query) => this.getCustomerApiCall(query),\r\n        postProcess: (result: GraphqlResult) => {\r\n          this.statistics = result.statistics;\r\n          this.displaySpinner(false);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  angularGridReady(angularGrid: AngularGridInstance) {\r\n    this.angularGrid = angularGrid;\r\n    this.gridStateSub = this.angularGrid.gridStateService.onGridStateChanged.subscribe((data) => console.log(data));\r\n  }\r\n\r\n  displaySpinner(isProcessing) {\r\n    this.processing = isProcessing;\r\n    this.status = (isProcessing)\r\n      ? { text: 'processing...', class: 'alert alert-danger' }\r\n      : { text: 'done', class: 'alert alert-success' };\r\n  }\r\n\r\n  getBackendOptions(withCursor: boolean): GraphqlServiceOption {\r\n    // with cursor, paginationOptions can be: { first, last, after, before }\r\n    // without cursor, paginationOptions can be: { first, last, offset }\r\n    return {\r\n      columnDefinitions: this.columnDefinitions,\r\n      datasetName: GRAPHQL_QUERY_DATASET_NAME,\r\n      isWithCursor: withCursor,\r\n      addLocaleIntoQuery: true,\r\n      extraQueryArguments: [{\r\n        field: 'userId',\r\n        value: 123\r\n      }],\r\n\r\n      // when dealing with complex objects, we want to keep our field name with double quotes\r\n      // example with gender: query { users (orderBy:[{field:\"gender\",direction:ASC}]) {}\r\n      keepArgumentFieldDoubleQuotes: true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calling your GraphQL backend server should always return a Promise or Observable of type GraphqlResult\r\n   *\r\n   * @param query\r\n   * @return Promise<GraphqlResult> | Observable<GraphqlResult>\r\n   */\r\n  getCustomerApiCall(query: string): Promise<GraphqlResult> {\r\n    // in your case, you will call your WebAPI function (wich needs to return a Promise)\r\n    // for the demo purpose, we will call a mock WebAPI function\r\n    const mockedResult = {\r\n      // the dataset name is the only unknown property\r\n      // will be the same defined in your GraphQL Service init, in our case GRAPHQL_QUERY_DATASET_NAME\r\n      data: {\r\n        [GRAPHQL_QUERY_DATASET_NAME]: {\r\n          nodes: [],\r\n          pageInfo: {\r\n            hasNextPage: true\r\n          },\r\n          totalCount: 100\r\n        }\r\n      },\r\n      timestamps: {\r\n        startTime: new Date(),\r\n        endTime: new Date(),\r\n        executionTime: 150\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        this.graphqlQuery = this.angularGrid.backendService.buildQuery();\r\n        resolve(mockedResult);\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState(grid) {\r\n    console.log('GraphQL current grid state', this.angularGrid.gridStateService.getCurrentGridState());\r\n  }\r\n\r\n  switchLanguage() {\r\n    this.selectedLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.translate.use(this.selectedLanguage);\r\n  }\r\n}\r\n","import 'slickgrid/lib/jquery.jsonp-2.4.min';\nimport 'slickgrid/slick.remotemodel'; // SlickGrid Remote Plugin\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AngularGridInstance, Column, Formatter, GridOption  } from 'angular-slickgrid';\n\ndeclare var Slick: any;\n\nconst brandFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  return dataContext && dataContext.brand && dataContext.brand.name || '';\n};\n\nconst mpnFormatter: Formatter = (row: number, cell: number, value: any, columnDef: Column, dataContext: any) => {\n  let link = '';\n  if (dataContext && dataContext.octopart_url && dataContext.mpn) {\n    link = `<a href=\"${dataContext.octopart_url}\" target=\"_blank\">${dataContext.mpn}</a>`;\n  }\n  return link;\n};\n\n@Component({\n  templateUrl: './grid-remote.component.html'\n})\nexport class GridRemoteComponent implements OnDestroy, OnInit {\n  private _eventHandler: any = new Slick.EventHandler();\n\n  title = 'Example 18: Octopart Catalog Search - Remote Model Plugin';\n  subTitle = `\n    This example demonstrates how to use \"slick.remotemodel.js\" or any Remote implementation through an external Remote Service\n    <ul>\n      <li>\n        Your browser (Chrome) might block access to the Octopart query, if you get \"block content\" then just unblock it \n        or try with different browser like Firefox or Edge\n      </li>\n      <li>If the demo throws some errors, try again later (there's a limit per day).</li>\n      <li>\n        Uses <a href=\"https://github.com/6pac/SlickGrid/blob/master/slick.remotemodel.js\" target=\"_blank\">slick.remotemodel.js</a>\n        which is hooked up to load search results from Octopart, but can easily be extended\n        to support any JSONP-compatible backend that accepts paging parameters.\n      </li>\n      <li>\n        This demo implements a custom DataView, however please note that you are on your own to implement all necessary DataView methods\n        for Sorting, Filtering, etc...\n      </li>\n      <li>\n      Soure code for this example is available <a href=\"https://github.com/ghiscoding/Angular-Slickgrid/blob/master/src/app/examples/grid-remote.component.ts\" target=\"_blank\">here</a>\n      </li>\n    </ul>\n  `;\n\n  angularGrid: AngularGridInstance;\n  columnDefinitions: Column[];\n  customDataView: any;\n  gridObj: any;\n  gridOptions: GridOption;\n  dataset = [];\n  loaderDataView: any;\n  loading = false; // spinner when loading data\n  search = 'switch';\n\n  constructor() {\n    this.loaderDataView = new Slick.Data.RemoteModel();\n    this.customDataView = this.loaderDataView && this.loaderDataView.data;\n  }\n\n  angularGridReady(angularGrid: AngularGridInstance) {\n    this.angularGrid = angularGrid;\n    this.gridObj = angularGrid.slickGrid; // grid object\n    this.loaderDataView.setSort('score', -1);\n    this.gridObj.setSortColumn('score', false);\n\n    // notify of a change to preload the first page\n    this.gridObj.onViewportChanged.notify();\n  }\n\n  ngOnDestroy() {\n    // unsubscribe all SlickGrid events\n    this._eventHandler.unsubscribeAll();\n  }\n\n  ngOnInit(): void {\n    this.defineGrid();\n    this.hookAllLoaderEvents();\n    this.loaderDataView.setSearch(this.search);\n  }\n\n  defineGrid() {\n    this.columnDefinitions = [\n      { id: 'mpn', name: 'MPN', field: 'mpn', formatter: mpnFormatter, width: 100, sortable: true },\n      { id: 'brand', name: 'Brand', field: 'brand.name', formatter: brandFormatter, width: 100, sortable: true },\n      { id: 'short_description', name: 'Description', field: 'short_description', width: 520 },\n    ];\n\n    this.gridOptions = {\n      enableAutoResize: true,\n      autoResize: {\n        containerId: 'demo-container',\n        sidePadding: 15\n      },\n      enableCellNavigation: true,\n      enableColumnReorder: false,\n      enableGridMenu: false,\n      multiColumnSort: false\n    };\n  }\n\n  hookAllLoaderEvents() {\n    if (this._eventHandler && this._eventHandler.subscribe && this.loaderDataView && this.loaderDataView.onDataLoading && this.loaderDataView.onDataLoaded) {\n      this._eventHandler.subscribe(this.loaderDataView.onDataLoading, (e: Event, args: any) => {\n        this.loading = true;\n      });\n\n      this._eventHandler.subscribe(this.loaderDataView.onDataLoaded, (e: Event, args: any) => {\n        if (args && this.gridObj && this.gridObj.invalidateRow && this.gridObj.updateRowCount && this.gridObj.render) {\n          for (let i = args.from; i <= args.to; i++) {\n            this.gridObj.invalidateRow(i);\n          }\n          this.gridObj.updateRowCount();\n          this.gridObj.render();\n          this.loading = false;\n        }\n      });\n    }\n  }\n\n  onSort(e, args) {\n    if (this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData && this.loaderDataView.setSort) {\n      const vp = this.gridObj.getViewport();\n      if (args && args.sortCol && args.sortCol.field) {\n        this.loaderDataView.setSort(args.sortCol.field, args.sortAsc ? 1 : -1);\n      }\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\n    }\n  }\n\n  onViewportChanged(e, args) {\n    if (this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData) {\n      const vp = this.gridObj.getViewport();\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\n    }\n  }\n\n  searchChanged(newValue: string) {\n    if (newValue && this.gridObj && this.gridObj.getViewport && this.loaderDataView && this.loaderDataView.ensureData && this.loaderDataView.setSearch) {\n      const vp = this.gridObj.getViewport();\n      this.loaderDataView.setSearch(newValue);\n      this.loaderDataView.ensureData(vp.top, vp.bottom);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AngularGridInstance, Column, Formatters, GridOption } from 'angular-slickgrid';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  templateUrl: './grid-rowmove.component.html'\n})\nexport class GridRowMoveComponent implements OnInit {\n  title = 'Example 17: Row Move Plugin';\n  subTitle = `This example demonstrates using the <b>Slick.Plugins.RowMoveManager</b> plugin to easily move a row in the grid.<br/>\n    <ul>\n      <li>Click to select, Ctrl+Click to toggle selection, Shift+Click to select a range.</li>\n      <li>Drag one or more rows by the handle (icon) to reorder</li>\n    </ul>\n  `;\n\n  angularGrid: AngularGridInstance;\n  columnDefinitions: Column[];\n  gridOptions: GridOption;\n  dataset: any[];\n  selectedLanguage: string;\n\n  constructor(private translate: TranslateService) {\n    this.selectedLanguage = this.translate.getDefaultLang();\n  }\n\n  angularGridReady(angularGrid: any) {\n    this.angularGrid = angularGrid;\n  }\n\n  ngOnInit(): void {\n    this.columnDefinitions = [\n      {\n        id: '#', field: '', name: '', width: 40,\n        behavior: 'selectAndMove',\n        selectable: false, resizable: false,\n        cssClass: 'cell-reorder dnd',\n        excludeFromExport: true\n      },\n      { id: 'title', name: 'Title', field: 'title' },\n      { id: 'duration', name: 'Duration', field: 'duration', sortable: true },\n      { id: '%', name: '% Complete', field: 'percentComplete', sortable: true },\n      { id: 'start', name: 'Start', field: 'start' },\n      { id: 'finish', name: 'Finish', field: 'finish' },\n      { id: 'effort-driven', name: 'Completed', field: 'effortDriven', formatter: Formatters.checkmark }\n    ];\n\n    this.gridOptions = {\n      autoResize: {\n        containerId: 'demo-container',\n        sidePadding: 15\n      },\n      enableCellNavigation: true,\n      enableRowMoveManager: true,\n      gridMenu: {\n        iconCssClass: 'fa fa-ellipsis-v',\n      },\n      rowMoveManager: {\n        onBeforeMoveRows: (e, args) => this.onBeforeMoveRow(e, args),\n        onMoveRows: (e, args) => this.onMoveRows(e, args),\n      },\n      enableTranslate: true,\n      i18n: this.translate\n    };\n\n    this.getData();\n  }\n\n  getData() {\n    // Set up some test columns.\n    const mockDataset = [];\n    for (let i = 0; i < 500; i++) {\n      mockDataset[i] = {\n        id: i,\n        title: 'Task ' + i,\n        duration: Math.round(Math.random() * 25) + ' days',\n        percentComplete: Math.round(Math.random() * 100),\n        start: '01/01/2009',\n        finish: '01/05/2009',\n        effortDriven: (i % 5 === 0)\n      };\n    }\n    this.dataset = mockDataset;\n  }\n\n  onBeforeMoveRow(e, data) {\n    for (let i = 0; i < data.rows.length; i++) {\n      // no point in moving before or after itself\n      if (data.rows[i] === data.insertBefore || data.rows[i] === data.insertBefore - 1) {\n        e.stopPropagation();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  onMoveRows(e, args) {\n    const extractedRows = [];\n    let left;\n    let right;\n    const rows = args.rows;\n    const insertBefore = args.insertBefore;\n    left = this.dataset.slice(0, insertBefore);\n    right = this.dataset.slice(insertBefore, this.dataset.length);\n    rows.sort((a, b) => {\n      return a - b;\n    });\n\n    for (let i = 0; i < rows.length; i++) {\n      extractedRows.push(this.dataset[rows[i]]);\n    }\n\n    rows.reverse();\n\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      if (row < insertBefore) {\n        left.splice(row, 1);\n      } else {\n        right.splice(row - insertBefore, 1);\n      }\n    }\n    this.dataset = left.concat(extractedRows.concat(right));\n    const selectedRows = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      selectedRows.push(left.length + i);\n    }\n\n    this.angularGrid.slickGrid.resetActiveCell();\n    this.angularGrid.slickGrid.setData(this.dataset);\n    this.angularGrid.slickGrid.setSelectedRows(selectedRows);\n    this.angularGrid.slickGrid.render();\n  }\n}\n","import { Component, Injectable, OnInit } from '@angular/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  Editors,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption\r\n} from 'angular-slickgrid';\r\n\r\n@Component({\r\n  templateUrl: './grid-rowselection.component.html'\r\n})\r\n@Injectable()\r\nexport class GridRowSelectionComponent implements OnInit {\r\n  title = 'Example 10: Multiple Grids with Row Selection';\r\n  subTitle = `\r\n    Row selection, single or multi-select (<a href=\"https://github.com/ghiscoding/Angular-Slickgrid/wiki/Row-Selection\" target=\"_blank\">Wiki docs</a>).\r\n    <ul>\r\n      <li>Single Select, you can click on any cell to make the row active</li>\r\n      <li>Multiple Selections, you need to specifically click on the checkbox to make 1 or more selections</li>\r\n      <li>Note that \"enableExcelCopyBuffer\" cannot be used at the same time as Row Selection because there can exist only 1 SelectionModel at a time</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid1: AngularGridInstance;\r\n  angularGrid2: AngularGridInstance;\r\n  columnDefinitions1: Column[];\r\n  columnDefinitions2: Column[];\r\n  gridOptions1: GridOption;\r\n  gridOptions2: GridOption;\r\n  dataset1: any[];\r\n  dataset2: any[];\r\n  gridObj1: any;\r\n  gridObj2: any;\r\n  selectedTitles: any[];\r\n  selectedTitle: any;\r\n\r\n  ngOnInit(): void {\r\n    this.prepareGrid();\r\n  }\r\n\r\n  angularGridReady1(angularGrid: AngularGridInstance) {\r\n    this.angularGrid1 = angularGrid;\r\n    this.gridObj1 = angularGrid && angularGrid.slickGrid || {};\r\n  }\r\n\r\n  angularGridReady2(angularGrid: AngularGridInstance) {\r\n    this.angularGrid2 = angularGrid;\r\n    this.gridObj2 = angularGrid && angularGrid.slickGrid || {};\r\n  }\r\n\r\n  prepareGrid() {\r\n    this.columnDefinitions1 = [\r\n      { id: 'title', name: 'Title', field: 'title', sortable: true, type: FieldType.string, editor: { model: Editors.longText } },\r\n      { id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, editor: { model: Editors.integer } },\r\n      { id: 'complete', name: '% Complete', field: 'percentComplete', formatter: Formatters.percentCompleteBar, type: FieldType.number, sortable: true },\r\n      { id: 'start', name: 'Start', field: 'start', formatter: Formatters.dateIso, sortable: true, type: FieldType.dateIso, editor: { model: Editors.date } },\r\n      { id: 'finish', name: 'Finish', field: 'finish', formatter: Formatters.dateIso, sortable: true, type: FieldType.date, editor: { model: Editors.date }, exportWithFormatter: true },\r\n      { id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven', formatter: Formatters.checkmark, type: FieldType.number, sortable: true }\r\n    ];\r\n\r\n    this.columnDefinitions2 = [\r\n      {\r\n        id: 'title', name: 'Title', field: 'title',\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        filterable: true\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration',\r\n        sortable: true,\r\n        type: FieldType.number,\r\n        filterable: true\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete',\r\n        formatter: Formatters.percentCompleteBar,\r\n        type: FieldType.number,\r\n        filterable: true,\r\n        sortable: true\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start',\r\n        filterable: true,\r\n        sortable: true,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true,\r\n        type: FieldType.date,\r\n        filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'finish', name: 'Finish', field: 'finish',\r\n        filterable: true,\r\n        sortable: true,\r\n        formatter: Formatters.dateIso,\r\n        exportWithFormatter: true,\r\n        type: FieldType.date,\r\n        filter: { model: Filters.compoundDate },\r\n      },\r\n      {\r\n        id: 'effort-driven', name: 'Effort Driven', field: 'effortDriven',\r\n        formatter: Formatters.checkmark,\r\n        type: FieldType.boolean,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'true' }, { value: false, label: 'false' }],\r\n          model: Filters.singleSelect,\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions1 = {\r\n      editable: true,\r\n      autoEdit: false,\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableFiltering: false,\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n      checkboxSelector: {\r\n        // remove the unnecessary \"Select All\" checkbox in header when in single selection mode\r\n        hideSelectAllCheckbox: true\r\n      },\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: true\r\n      },\r\n    };\r\n\r\n    this.gridOptions2 = {\r\n      enableAutoResize: false,\r\n      enableCellNavigation: true,\r\n      enableFiltering: true,\r\n      checkboxSelector: {\r\n        // you can toggle these 2 properties to show the \"select all\" checkbox in different location\r\n        hideInFilterHeaderRow: false,\r\n        hideInColumnTitleRow: true\r\n      },\r\n      rowSelectionOptions: {\r\n        // True (Single Selection), False (Multiple Selections)\r\n        selectActiveRow: false\r\n      },\r\n      preselectedRows: [0, 2],\r\n      enableCheckboxSelector: true,\r\n      enableRowSelection: true,\r\n    };\r\n\r\n    this.dataset1 = this.prepareData();\r\n    this.dataset2 = this.prepareData();\r\n  }\r\n\r\n  prepareData() {\r\n    // mock a dataset\r\n    const mockDataset = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      const randomYear = 2000 + Math.floor(Math.random() * 10);\r\n      const randomMonth = Math.floor(Math.random() * 11);\r\n      const randomDay = Math.floor((Math.random() * 29));\r\n      const randomPercent = Math.round(Math.random() * 100);\r\n\r\n      mockDataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        duration: Math.round(Math.random() * 100) + '',\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),\r\n        finish: new Date(randomYear, (randomMonth + 1), randomDay),\r\n        effortDriven: (i % 5 === 0)\r\n      };\r\n    }\r\n    return mockDataset;\r\n  }\r\n\r\n  handleSelectedRowsChanged1(e, args) {\r\n    if (Array.isArray(args.rows)) {\r\n      this.selectedTitle = args.rows.map(idx => {\r\n        const item = this.gridObj1.getDataItem(idx);\r\n        return item.title || '';\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSelectedRowsChanged2(e, args) {\r\n    if (Array.isArray(args.rows)) {\r\n      this.selectedTitles = args.rows.map(idx => {\r\n        const item = this.gridObj2.getDataItem(idx);\r\n        return item.title || '';\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n  AngularGridInstance,\r\n  Column,\r\n  FieldType,\r\n  Filters,\r\n  Formatters,\r\n  GridOption,\r\n  GridState,\r\n  GridStateChange\r\n} from 'angular-slickgrid';\r\n\r\nfunction randomBetween(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nconst LOCAL_STORAGE_KEY = 'gridState';\r\nconst NB_ITEMS = 500;\r\n\r\n@Component({\r\n  templateUrl: './grid-state.component.html'\r\n})\r\nexport class GridStateComponent implements OnInit {\r\n  title = 'Example 16: Grid State & Presets using Local Storage';\r\n  subTitle = `\r\n    Grid State & Preset (<a href=\"https://github.com/ghiscoding/aurelia-slickgrid/wiki/Grid-State-&-Preset\" target=\"_blank\">Wiki docs</a>)\r\n    <br/>\r\n    <ul class=\"small\">\r\n      <li>Uses Local Storage to persist the Grid State and uses Grid Options \"presets\" to put the grid back to it's previous state</li>\r\n      <ul>\r\n        <li>to demo this, simply change any columns (position reorder, visibility, size, filter, sort), then refresh your browser with (F5)</li>\r\n      </ul>\r\n      <li>Local Storage is just one option, you can use whichever is more convenient for you (Local Storage, Session Storage, DB, ...)</li>\r\n    </ul>\r\n  `;\r\n\r\n  angularGrid: AngularGridInstance;\r\n  columnDefinitions: Column[];\r\n  gridOptions: GridOption;\r\n  dataset: any[];\r\n  selectedLanguage: string;\r\n\r\n  constructor(private translate: TranslateService) {\r\n    this.selectedLanguage = this.translate.getDefaultLang();\r\n  }\r\n\r\n  angularGridReady(angularGrid: any) {\r\n    this.angularGrid = angularGrid;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const presets = JSON.parse(localStorage[LOCAL_STORAGE_KEY] || null);\r\n\r\n    // use some Grid State preset defaults if you wish\r\n    // presets = presets || this.useDefaultPresets();\r\n\r\n    this.defineGrid(presets);\r\n  }\r\n\r\n  /** Clear the Grid State from Local Storage and reset the grid to it's original state */\r\n  clearGridStateFromLocalStorage() {\r\n    localStorage[LOCAL_STORAGE_KEY] = null;\r\n    this.angularGrid.gridService.resetGrid(this.columnDefinitions);\r\n  }\r\n\r\n  /* Define grid Options and Columns */\r\n  defineGrid(gridStatePresets?: GridState) {\r\n    // prepare a multiple-select array to filter with\r\n    const multiSelectFilterArray = [];\r\n    for (let i = 0; i < NB_ITEMS; i++) {\r\n      multiSelectFilterArray.push({ value: i, label: i });\r\n    }\r\n\r\n    this.columnDefinitions = [\r\n      {\r\n        id: 'title',\r\n        name: 'Title',\r\n        field: 'title',\r\n        headerKey: 'TITLE',\r\n        filterable: true,\r\n        sortable: true,\r\n        type: FieldType.string,\r\n        minWidth: 45, width: 100,\r\n        filter: {\r\n          model: Filters.compoundInput\r\n        }\r\n      },\r\n      {\r\n        id: 'description', name: 'Description', field: 'description', filterable: true, sortable: true, minWidth: 80, width: 100,\r\n        type: FieldType.string,\r\n        filter: {\r\n          model: Filters.input\r\n        }\r\n      },\r\n      {\r\n        id: 'duration', name: 'Duration (days)', field: 'duration', sortable: true, type: FieldType.number, exportCsvForceToKeepAsString: true,\r\n        minWidth: 55, width: 100,\r\n        headerKey: 'DURATION',\r\n        filterable: true,\r\n        filter: {\r\n          collection: multiSelectFilterArray,\r\n          model: Filters.multipleSelect,\r\n          searchTerms: [1, 33, 44, 50, 66], // default selection\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            maxHeight: 250,\r\n            width: 175\r\n          }\r\n        }\r\n      },\r\n      {\r\n        id: 'complete', name: '% Complete', field: 'percentComplete', minWidth: 70, type: FieldType.number, sortable: true, width: 100,\r\n        formatter: Formatters.percentCompleteBar, filterable: true, filter: { model: Filters.slider, operator: '>' }\r\n      },\r\n      {\r\n        id: 'start', name: 'Start', field: 'start', headerKey: 'START', formatter: Formatters.dateIso, sortable: true, minWidth: 75, exportWithFormatter: true, width: 100,\r\n        type: FieldType.date, filterable: true, filter: { model: Filters.compoundDate }\r\n      },\r\n      {\r\n        id: 'completed', field: 'completed', headerKey: 'COMPLETED', minWidth: 85, maxWidth: 85, formatter: Formatters.checkmark, width: 100,\r\n        type: FieldType.boolean,\r\n        sortable: true,\r\n        filterable: true,\r\n        filter: {\r\n          collection: [{ value: '', label: '' }, { value: true, label: 'True' }, { value: false, label: 'False' }],\r\n          model: Filters.singleSelect,\r\n\r\n          // we could add certain option(s) to the \"multiple-select\" plugin\r\n          filterOptions: {\r\n            autoDropWidth: true\r\n          },\r\n        }\r\n      }\r\n    ];\r\n\r\n    this.gridOptions = {\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      },\r\n      enableCheckboxSelector: true,\r\n      enableFiltering: true,\r\n      enableTranslate: true,\r\n      i18n: this.translate\r\n    };\r\n\r\n    // reload the Grid State with the grid options presets\r\n    if (gridStatePresets) {\r\n      this.gridOptions.presets = gridStatePresets;\r\n    }\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    // mock a dataset\r\n    this.dataset = [];\r\n    for (let i = 0; i < NB_ITEMS; i++) {\r\n      const randomDuration = Math.round(Math.random() * 100);\r\n      const randomYear = randomBetween(2000, 2025);\r\n      const randomYearShort = randomBetween(10, 25);\r\n      const randomMonth = randomBetween(1, 12);\r\n      const randomMonthStr = (randomMonth < 10) ? `0${randomMonth}` : randomMonth;\r\n      const randomDay = randomBetween(10, 28);\r\n      const randomPercent = randomBetween(0, 100);\r\n      const randomHour = randomBetween(10, 23);\r\n      const randomTime = randomBetween(10, 59);\r\n\r\n      this.dataset[i] = {\r\n        id: i,\r\n        title: 'Task ' + i,\r\n        etc: 'Something hidden ' + i,\r\n        description: (i % 5) ? 'desc ' + i : null, // also add some random to test NULL field\r\n        duration: randomDuration,\r\n        percentComplete: randomPercent,\r\n        percentCompleteNumber: randomPercent,\r\n        start: new Date(randomYear, randomMonth, randomDay),          // provide a Date format\r\n        usDateShort: `${randomMonth}/${randomDay}/${randomYearShort}`, // provide a date US Short in the dataset\r\n        utcDate: `${randomYear}-${randomMonthStr}-${randomDay}T${randomHour}:${randomTime}:${randomTime}Z`,\r\n        completed: (i % 3 === 0)\r\n      };\r\n    }\r\n  }\r\n\r\n  /** Dispatched event of a Grid State Changed event */\r\n  gridStateChanged(gridStateChanges: GridStateChange) {\r\n    console.log('Client sample, Grid State changed:: ', gridStateChanges);\r\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridStateChanges.gridState);\r\n  }\r\n\r\n  /** Save current Filters, Sorters in LocaleStorage or DB */\r\n  saveCurrentGridState(grid) {\r\n    const gridState: GridState = this.angularGrid.gridStateService.getCurrentGridState();\r\n    console.log('Client sample, last Grid State:: ', gridState);\r\n    localStorage[LOCAL_STORAGE_KEY] = JSON.stringify(gridState);\r\n  }\r\n\r\n  switchLanguage() {\r\n    this.selectedLanguage = (this.selectedLanguage === 'en') ? 'fr' : 'en';\r\n    this.translate.use(this.selectedLanguage);\r\n  }\r\n\r\n  useDefaultPresets() {\r\n    // use columnDef searchTerms OR use presets as shown below\r\n    return {\r\n      columns: [\r\n        { columnId: 'description', width: 170 }, // flip column position of Title/Description to Description/Title\r\n        { columnId: 'title', width: 55 },\r\n        { columnId: 'duration' },\r\n        { columnId: 'complete' },\r\n        { columnId: 'start' },\r\n        { columnId: 'usDateShort' },\r\n        { columnId: 'utcDate' },\r\n        // { columnId: 'completed' }, // to HIDE a column, simply ommit it from the preset array\r\n      ],\r\n      filters: [\r\n        { columnId: 'duration', searchTerms: [2, 22, 44] },\r\n        // { columnId: 'complete', searchTerms: ['5'], operator: '>' },\r\n        { columnId: 'usDateShort', operator: '<', searchTerms: ['4/20/25'] },\r\n        // { columnId: 'completed', searchTerms: [true] }\r\n      ],\r\n      sorters: [\r\n        { columnId: 'duration', direction: 'DESC' },\r\n        { columnId: 'complete', direction: 'ASC' }\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/**\r\n * This is a \"ngx-logger\" branch (https://www.npmjs.com/package/ngx-logger)\r\n * Customized logging template + Simplified into our needs\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\r\n\r\n\r\n\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {isPlatformBrowser} from '@angular/common';\r\n\r\nexport class Logger {\r\n    private _clientLogLevel: LoggerLevel = LoggerLevel.INFO;\r\n\r\n    private _serverLogLevel: LoggerLevel = LoggerLevel.OFF;\r\n\r\n    private _isIE = true;\r\n\r\n    private options: LoggerConfig = {\r\n            level: this._clientLogLevel,\r\n            serverLogLevel: this._serverLogLevel,\r\n            serverLoggingUrl: '/remotelog.do'\r\n          };\r\n\r\n    constructor(private _class: string, private http?: HttpClient) {\r\n        this._isIE = !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\r\n    }\r\n\r\n    trace(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.TRACE, true, message, additional);\r\n    }\r\n\r\n    debug(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.DEBUG, true, message, additional);\r\n    }\r\n\r\n    info(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.INFO, true, message, additional);\r\n    }\r\n\r\n    log(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.LOG, true, message, additional);\r\n    }\r\n\r\n    warn(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.WARN, true, message, additional);\r\n    }\r\n\r\n    error(message, ...additional: any[]) {\r\n      this._log(LoggerLevel.ERROR, true, message, additional);\r\n    }\r\n\r\n    private _timestamp() {\r\n      return new Date().toISOString();\r\n    }\r\n\r\n    private _logOnServer(level: LoggerLevel, message, additional: any[]) {\r\n      if (!this.options.serverLoggingUrl) {\r\n        return;\r\n      }\r\n\r\n      // if the user provides a serverLogLevel and the current level is than that do not log\r\n      if (level < this._serverLogLevel) {\r\n        return;\r\n      }\r\n\r\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n      this.http.post(this.options.serverLoggingUrl, {\r\n        level: Levels[level],\r\n        message: message,\r\n        additional: additional,\r\n        timestamp: this._timestamp()\r\n      }, {headers})\r\n        .subscribe(\r\n          res => null,\r\n          error => this._log(LoggerLevel.ERROR, false, 'FAILED TO LOG ON SERVER')\r\n        );\r\n    }\r\n\r\n    private _logIE(level: LoggerLevel, message: string, additional: any[]) {\r\n      switch (level) {\r\n        case LoggerLevel.WARN:\r\n          console.warn(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n          break;\r\n        case LoggerLevel.ERROR:\r\n          console.error(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n          break;\r\n        case LoggerLevel.INFO:\r\n          console.info(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n          break;\r\n        default:\r\n          console.log(`${this._timestamp()} [${Levels[level]}]  -${this._class}-`, message, ...additional);\r\n      }\r\n    }\r\n\r\n    private _log(level: LoggerLevel, logOnServer: boolean, message, additional: any[] = []) {\r\n      if (!message) {\r\n        return;\r\n      }\r\n\r\n      // Allow logging on server even if client log level is off\r\n      if (logOnServer) {\r\n        this._logOnServer(level, message, additional);\r\n      }\r\n\r\n      // if no message or the log level is less than the environ\r\n      if (level < this._clientLogLevel) {\r\n        return;\r\n      }\r\n\r\n      if (typeof message === 'object') {\r\n        try {\r\n          message = JSON.stringify(message, null, 2);\r\n        } catch (e) {\r\n          additional = [message, ...additional];\r\n          message = 'circular object in message. ';\r\n        }\r\n      }\r\n\r\n      // Coloring doesn't work in IE\r\n      if (this._isIE) {\r\n        return this._logIE(level, message, additional);\r\n      }\r\n\r\n      const color = this._getColor(level);\r\n\r\n      console.log(`%c${this._timestamp()} [${Levels[level]}] - ${this._class} -`, `color:${color}`, message, ...additional);\r\n    }\r\n\r\n    private _getColor(level: LoggerLevel) {\r\n      switch (level) {\r\n        case LoggerLevel.TRACE:\r\n          return 'blue';\r\n        case LoggerLevel.DEBUG:\r\n          return 'teal';\r\n        case LoggerLevel.INFO:\r\n        case LoggerLevel.LOG:\r\n          return 'gray';\r\n        case LoggerLevel.WARN:\r\n        case LoggerLevel.ERROR:\r\n          return 'red';\r\n        case LoggerLevel.OFF:\r\n        default:\r\n          return 'black';\r\n      }\r\n    }\r\n}\r\n\r\nexport class LoggerConfig {\r\n    level: LoggerLevel;\r\n    serverLogLevel: LoggerLevel;\r\n    serverLoggingUrl?: string;\r\n  }\r\n\r\n  export enum LoggerLevel {\r\n      TRACE = 0, DEBUG, INFO, LOG, WARN, ERROR, OFF\r\n  }\r\n\r\n  const Levels = [\r\n      'TRACE',\r\n      'DEBUG',\r\n      'INFO',\r\n      'LOG',\r\n      'WARN',\r\n      'ERROR',\r\n      'OFF'\r\n  ];\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent {\r\n  title = 'Angular-Slickgrid - Demo Site';\r\n  subTitle = 'This site is to demo multiple usage of Angular-Slickgrid, choose an example from left side menu';\r\n}\r\n","import { Component, OnInit, Injectable, ViewContainerRef, ComponentFactoryResolver,\r\n         ComponentFactory, ComponentRef, AfterContentChecked, AfterViewChecked,\r\n         AfterViewInit, Input, EventEmitter, Output, ViewChild ,\r\n         ElementRef, Renderer} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AngularSlickgridComponent, Column, FieldType, Formatter, Formatters,\r\n         GridOption, OnEventArgs, BackendService,\r\n         BackendServiceOption, FilterChangedArgs, PaginationChangedArgs, SortChangedArgs, Pagination} from 'angular-slickgrid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Logger } from './swt-logger.service';\r\nimport { SwtCommonGridPaginationComponent } from './swt-common-grid-pagination.component';\r\n\r\n/**\r\n * Custom wrapper of angular-slickgrid components, allows easily interacting with SwtCommonGridPaginationComponent\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n\r\nlet timer: any;\r\nconst DEFAULT_FILTER_TYPING_DEBOUNCE = 750;\r\n\r\n@Component({\r\n  selector: 'swt-common-grid',\r\n  template: `<angular-slickgrid gridId='common-grid'\r\n                      #angularSlickGrid\r\n                      (onDataviewCreated)=\"dataviewReady($event)\"\r\n                      (onGridCreated)=\"gridReady($event)\"\r\n                      [columnDefinitions]=\"columnDefinitions\"\r\n                      [gridOptions]=\"gridOptions\"\r\n                      [dataset]=\"dataset\"\r\n                      >\r\n                      </angular-slickgrid>`,\r\n  styles: [`\r\n       :host ::ng-deep .gridPane{\r\n            width: 100%!important;\r\n        }\r\n        :host ::ng-deep .slickgrid-container{\r\n            width: 100%!important;\r\n         }\r\n    `]\r\n})\r\n\r\n@Injectable()\r\nexport class SwtCommonGridComponent implements OnInit, AfterViewInit, BackendService {\r\n\r\n    private logger: Logger = null;\r\n    private defaultPageSize = 20;\r\n\r\n    @Input() gridHeight = 100;\r\n    @Input() gridWidth = 600;\r\n\r\n    gridHeightString: string;\r\n    gridWidthString: string;\r\n\r\n    @ViewChild('angularSlickGrid') angularSlickGrid: AngularSlickgridComponent;\r\n\r\n    columnDefinitions: Column[] = [];\r\n    dataset: any[];\r\n    gridObj: any;\r\n    dataviewObj: any;\r\n    isAutoEdit = false;\r\n    updatedObject: any;\r\n    isMultiSelect = true;\r\n    selectedObjects: any[];\r\n    selectedObject: any;\r\n\r\n    // Slick grid\r\n    metaData: any;\r\n    columnData: any;\r\n    rowsData: any;\r\n    selects: any;\r\n    id: any;\r\n\r\n    options: BackendServiceOption;\r\n    pagination: Pagination;\r\n\r\n\r\n    @Output('onFilterChanged') onFilterChanged_: EventEmitter<FilterChangedArgs> = new EventEmitter<FilterChangedArgs>();\r\n    @Output('onPaginationChanged') onPaginationChanged_: EventEmitter<PaginationChangedArgs> = new EventEmitter<PaginationChangedArgs>();\r\n    @Output('onSortChanged') onSortChanged_: EventEmitter<SortChangedArgs> = new EventEmitter<SortChangedArgs>();\r\n\r\n    sortedGridColumn = '';\r\n    currentPage = 1;\r\n    filteredGridColumns = '';\r\n\r\n    // Data\r\n\r\n\r\n    // Injected functions\r\n    private _onRowDoubleClick: Function = new Function();\r\n    private _onRowClick: Function = new Function();\r\n\r\n\r\n    private _selectedRow: any;\r\n\r\n\r\n    gridOptions: GridOption = {\r\n        asyncEditorLoading: false,\r\n        autoEdit: this.isAutoEdit,\r\n        autoResize: {\r\n          containerId: 'common-grid-container',\r\n          sidePadding: 15\r\n        },\r\n        // locale: 'fr',\r\n        enableColumnPicker: true,\r\n        enableCellNavigation: true,\r\n        enableRowSelection: true,\r\n        enableCheckboxSelector: false,\r\n        enableFiltering: true ,\r\n        rowHeight: 23,\r\n        forceFitColumns: true,\r\n        enableAutoTooltip: true,\r\n        enableGridMenu: true,\r\n        enablePagination: false\r\n    };\r\n\r\n    // Initialized to a fake pagination object\r\n    private _paginationComponent: any = {\r\n         processing: false,\r\n         realPagination: false\r\n    };\r\n\r\n    @Input('pagination')\r\n    set paginationComponent(value: SwtCommonGridPaginationComponent) {\r\n        this.logger.info('method [pagination] - START, assigned datagrid pagination object: ', value.realPagination );\r\n        if (value.realPagination) {\r\n            this._paginationComponent = value;\r\n            this.gridOptions.backendServiceApi = {\r\n              service: this,\r\n              preProcess: () => {},\r\n              process: (query) => {\r\n                return null;\r\n              },\r\n              postProcess: (response) => {}\r\n            };\r\n            this._paginationComponent.gridPaginationOptions = this.gridOptions;\r\n            this.angularSlickGrid.createBackendApiInternalPostProcessCallback(this.gridOptions);\r\n        }\r\n        this.logger.info('method [pagination] - START');\r\n    }\r\n\r\n    get paginationComponent(): SwtCommonGridPaginationComponent {\r\n        return this._paginationComponent;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param gridService\r\n     * @param resizer\r\n     * @param httpClient\r\n     */\r\n    constructor(private httpClient: HttpClient, private translate: TranslateService,\r\n            private el: ElementRef, private renderer: Renderer) {\r\n        this.logger = new Logger('grid', httpClient);\r\n\r\n        this.logger.info('method [constructor] - START/END');\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    ngOnInit() {\r\n        this.logger.info('method [ngOnInit] - START/END');\r\n        // this.gridHeightString = `${this.gridHeight}px`;\r\n        // this.gridWidthString = `${this.gridWidth}px`;\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     */\r\n    ngAfterViewInit() {\r\n       this.logger.info('method [ngAfterViewInit] - START/END');\r\n    }\r\n\r\n    /**\r\n    * CustomGrid constructor\r\n    * @param columnData\r\n    */\r\n    CustomGrid(columnData: any) {\r\n        this.logger.info('method [CustomGrid] - START');\r\n\r\n        this.id = 'grid' + Math.floor(Math.random() * Math.floor(100));\r\n\r\n        // get metadata from input JSON\r\n        this.metaData = columnData;\r\n\r\n        // COLUMNS DATA\r\n        const rowData: any = [];\r\n\r\n        // check if allcolumns tag contains any children\r\n        if (this.metaData.columns.column  ) {\r\n\r\n            // set columnsData and columnDefinitions\r\n            this.columnData = this.metaData.columns.column ;\r\n\r\n            for (let index = 0; index < this.columnData.length; index++) {\r\n\r\n                const type       = FieldType.string;\r\n                const editor     = null;\r\n                const formatter  = null;\r\n                const filter     = null;\r\n                const outputType = null;\r\n                const params     = null;\r\n\r\n                const col = {    id:         this.columnData[index].dataelement,\r\n                                 name:       this.columnData[index].heading,\r\n                                 field:      this.columnData[index].dataelement,\r\n                                 sortable:   this.columnData[index].sort,\r\n                                 filterable: this.columnData[index].filterable,\r\n                                 type,\r\n                                 editor,\r\n                                 formatter,\r\n                                 filter,\r\n                                 outputType,\r\n                                 params ,\r\n                                 width:      this.columnData[index].width\r\n                             };\r\n\r\n                this.columnDefinitions.push(col);\r\n                rowData[col.id] = '';\r\n            }\r\n\r\n            // Columns are not visible, seems to be a bug ? next line fixed it..\r\n            this.gridObj.setColumns(this.columnDefinitions);\r\n            this.angularSlickGrid.showPagination = false;\r\n\r\n            // Show filters when grid starts; this could be parametrized\r\n            // this.gridObj.setHeaderRowVisibility(false);\r\n            // this.gridObj.setTopPanelVisibility(false);\r\n        }\r\n\r\n        // Dummy dataset\r\n        this.dataset = rowData;\r\n\r\n        this.logger.info('method [CustomGrid] - END, this.columnDefinitions=', this.columnDefinitions);\r\n    }\r\n\r\n   /**\r\n    * CommonGrid constructor\r\n    * @param columnsData\r\n    * @param lockedColumnCount\r\n    * @param uniqueColumn\r\n    * @param baseURL\r\n    * @param programId\r\n    * @param componentId\r\n    * @param enableRenders\r\n    * @param colValidationMap\r\n    * @param checkHeader\r\n    * @param cboLinked\r\n    */\r\n    CommonGrid(columnsData: any, lockedColumnCount: number, uniqueColumn: string, baseURL: string, programId: string, componentId: string, enableRenders: boolean= true, colValidationMap: any= null, checkHeader: boolean= false, cboLinked: boolean= false) {\r\n    }\r\n\r\n\r\n    set gridData(rawData: any) {\r\n        this.logger.info('method [gridData] - START');\r\n        const dataProvider: any = [];\r\n\r\n        for (let index = 0; rawData.row && index < rawData.row.length; index++) {\r\n            const row = <Object> rawData.row[index];\r\n            const idObj = {\r\n               id : index\r\n            };\r\n\r\n            let key: string;\r\n            const rowData: any = [];\r\n            for (key in row) {\r\n                if (row.hasOwnProperty(key)) {\r\n                    rowData[key] = row[key].content;\r\n                }\r\n            }\r\n            dataProvider[index] = Object.assign(rowData, idObj);\r\n        }\r\n\r\n        this.dataset = dataProvider;\r\n        this.paginationComponent.processing = false;\r\n        this.logger.info('method [gridData] - END, all data size=' + (rawData && rawData.hasOwnProperty('size') ? rawData.size : 0));\r\n\r\n        // this.gridObj.setSortColumn('excludeType', true);\r\n        // this.dataviewObj.reSort();\r\n        // this.gridObj.setSortColumns([{'columnId':'excludeType','sortAsc':true}]);\r\n\r\n        // this.gridObj.invalidate();\r\n        // this.gridObj.render();\r\n    }\r\n\r\n    get gridData(): any {\r\n        return this.dataset;\r\n    }\r\n\r\n    gridReady(grid) {\r\n        this.logger.info('method [gridReady] - START');\r\n        this.gridObj = grid;\r\n        this.logger.info('method [gridReady] - END');\r\n    }\r\n\r\n    dataviewReady(dataview) {\r\n        this.logger.info('method [dataviewReady] - START/END', dataview);\r\n        this.dataviewObj = dataview;\r\n    }\r\n\r\n\r\n\r\n\r\n    /********************************************************/\r\n    /******** Pagination+Sot+Filter service : START *********/\r\n    /********************************************************/\r\n    buildQuery(): string {\r\n        return 'buildQuery...';\r\n    }\r\n\r\n    init( serviceOptions: BackendServiceOption, pagination?: Pagination ): void {\r\n        this.options = serviceOptions;\r\n        this.pagination = pagination;\r\n    }\r\n\r\n\r\n    resetPaginationOptions() {\r\n\r\n    }\r\n\r\n    updateOptions( serviceOptions?: BackendServiceOption ) {\r\n        this.options = { ...this.options, ...serviceOptions };\r\n    }\r\n\r\n\r\n    /**\r\n     * FILTERING EMIT EVENT\r\n     * @param event\r\n     * @param args\r\n     */\r\n    processOnFilterChanged( event: Event, args: FilterChangedArgs ): Promise<string> {\r\n        this.logger.info('method [onFilterChanged] - START', args);\r\n        this.filteredGridColumns = '';\r\n        let timing = 0;\r\n        if (event.type === 'keyup' || event.type === 'keydown') {\r\n            timing = DEFAULT_FILTER_TYPING_DEBOUNCE;\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(() => {\r\n            this.filteredGridColumns = '';\r\n            for (let idx = 0; idx < this.columnDefinitions.length; idx++) {\r\n                if (args.columnFilters.hasOwnProperty(this.columnDefinitions[idx].field)) {\r\n                    this.filteredGridColumns += args.columnFilters[this.columnDefinitions[idx].field].searchTerms[0] + '|';\r\n                } else {\r\n                    this.filteredGridColumns += 'All|';\r\n                }\r\n            }\r\n\r\n            // Reset to the first page\r\n            this.paginationComponent.pageNumber = 1;\r\n            this.currentPage = 1;\r\n\r\n            // dispatch event\r\n            this.onFilterChanged_.emit(args);\r\n            this.logger.info('method [onFilterChanged] - onFilterChanged_.emit(args) performed, filteredGridColumns=' + this.filteredGridColumns);\r\n        }, timing);\r\n\r\n        this.logger.info('method [onFilterChanged] - END');\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * PAGINATION EMIT EVENT\r\n     * @param event\r\n     * @param args\r\n     */\r\n    processOnPaginationChanged( event: Event, args: PaginationChangedArgs ) {\r\n        this.logger.info('method [onPaginationChanged] - START');\r\n        this.currentPage = args.newPage;\r\n        this.onPaginationChanged_.emit(args);\r\n        this.logger.info('method [onPaginationChanged] - END, currentPage=' + this.currentPage);\r\n        return 'onPaginationChanged';\r\n    }\r\n\r\n    /**\r\n     * SORT EMIT EVENT\r\n     * @param event\r\n     * @param args\r\n     */\r\n    processOnSortChanged( event: Event, args: SortChangedArgs ) {\r\n        this.logger.info('method [onSortChanged] - START');\r\n        this.sortedGridColumn = '';\r\n        const sortDirection = '|' + args.sortCols[0].sortAsc + '|';\r\n        for (let idx = 0; idx < this.columnDefinitions.length; idx++) {\r\n            if (this.columnDefinitions[idx].field === args.sortCols[0].sortCol.field) {\r\n                this.sortedGridColumn = '' + idx + sortDirection;\r\n            }\r\n        }\r\n        this.onSortChanged_.emit(args);\r\n        this.logger.info('method [onSortChanged] - END, sortedGridColumn=' + this.sortedGridColumn);\r\n        return 'onSortChanged';\r\n    }\r\n\r\n\r\n\r\n    getFilteredGridColumns() {\r\n        return this.filteredGridColumns;\r\n    }\r\n\r\n    getSortedGridColumn() {\r\n        return this.sortedGridColumn;\r\n    }\r\n\r\n    /******** Pagination+Sot+Filter service: END *****************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Getters and Setters\r\n    get selectedRow() {\r\n        return this._selectedRow;\r\n    }\r\n    set selectedRow(row: any) {\r\n        this._selectedRow = row;\r\n    }\r\n\r\n    get onRowDoubleClick() {\r\n        return this._onRowDoubleClick;\r\n    }\r\n    set onRowDoubleClick(event: Function) {\r\n        this._onRowDoubleClick = event;\r\n    }\r\n\r\n    get onRowClick() {\r\n        return this._onRowClick;\r\n    }\r\n    set onRowClick(event: Function) {\r\n        this._onRowClick = event;\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport {SwtCommonGridComponent} from './swt-common-grid.component';\r\nimport { Logger } from './swt-logger.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { GridOption } from 'angular-slickgrid';\r\n/**\r\n * Custom pagination component: It allows editing the page number manually\r\n *  << < Page [1] of 5 > >>\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n@Component({\r\n  selector: 'swt-common-grid-pagination',\r\n  template: `\r\n    <div class=\"slick-pagination\">\r\n    <div class=\"slick-pagination-nav\">\r\n        <nav aria-label=\"Page navigation\">\r\n            <ul class=\"pagination\">\r\n                <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n                    <a class=\"page-link icon-seek-first fa fa-angle-double-left\"\r\n                    aria-label=\"First\" (click)=\"changeToFirstPage($event)\"> </a>\r\n                </li>\r\n                <li class=\"page-item\" [ngClass]=\"pageNumber === 1 ? 'disabled' : ''\">\r\n                    <a class=\"page-link icon-seek-prev fa fa-angle-left\"\r\n                    aria-label=\"Previous\" (click)=\"changeToPreviousPage($event)\"> </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div class=\"slick-page-number\">\r\n            <span [translate]=\"'PAGE'\"></span>\r\n            <input type=\"text\" value=\"{{pageNumber}}\" size=\"1\"  (change)=\"changeToCurrentPage($event)\">\r\n            <span [translate]=\"'OF'\"></span><span> {{pageCount}}</span>\r\n        </div>\r\n\r\n        <nav aria-label=\"Page navigation\">\r\n            <ul class=\"pagination\">\r\n                <li class=\"page-item\"\r\n                    [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\"><a\r\n                    class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\"\r\n                    aria-label=\"Next\" (click)=\"changeToNextPage($event)\"> </a></li>\r\n                <li class=\"page-item\"\r\n                    [ngClass]=\"pageNumber === pageCount ? 'disabled' : ''\"><a\r\n                    class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\"\r\n                    aria-label=\"Last\" (click)=\"changeToLastPage($event)\"> </a></li>\r\n            </ul>\r\n        </nav>\r\n        <nav>\r\n            <ul class=\"pagination\">\r\n                <li class=\"\">\r\n                    <span [hidden]=\"!processing\" class=\"page-spin\">\r\n                        <i class=\"fa fa-refresh fa-spin fa-lg fa-fw\"></i>\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    </div>\r\n</div>\r\n  `,\r\n  styles: [`.page-spin {\r\n              border: none;\r\n              height: 32px;\r\n              background-color: transparent;\r\n              cursor: default;\r\n              animation: fa-spin 1.2s infinite linear !important;\r\n            }\r\n            .page-spin:hover {\r\n                background-color: transparent;\r\n            }\r\n  `]\r\n})\r\nexport class SwtCommonGridPaginationComponent implements OnInit {\r\n    private logger: Logger = null;\r\n\r\n    @Input('pageCount') pageCount = 1;\r\n    @Input('pageNumber') pageNumber = 1;\r\n\r\n    totalItems = 0;\r\n    processing = false;\r\n\r\n    // Reference to the real pagination component\r\n    realPagination =  true;\r\n    _gridPaginationOptions: GridOption;\r\n    commonGrid: SwtCommonGridComponent;\r\n\r\n    @Input()\r\n    set gridPaginationOptions(gridPaginationOptions: GridOption) {\r\n      this._gridPaginationOptions = gridPaginationOptions;\r\n\r\n      // The backendServiceApi is itself the SwtCommonGridComponent (This is a hack)\r\n      this.commonGrid = <SwtCommonGridComponent>this.gridPaginationOptions.backendServiceApi.service;\r\n    }\r\n    get gridPaginationOptions(): GridOption {\r\n      return this._gridPaginationOptions;\r\n    }\r\n\r\n\r\n\r\n    constructor(private httpClient: HttpClient) {\r\n        this.logger = new Logger('grid-pagination', httpClient);\r\n        this.logger.info('method [constructor] - START/END');\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.logger.info('init: ');\r\n    }\r\n\r\n\r\n\r\n    changeToFirstPage(event: any) {\r\n      this.logger.info('method [changeToFirstPage] - START/END');\r\n      this.pageNumber = 1;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n\r\n    changeToLastPage(event: any) {\r\n      this.logger.info('method [changeToLastPage] - START/END');\r\n      this.pageNumber = this.pageCount;\r\n      this.onPageChanged(event, this.pageNumber);\r\n    }\r\n\r\n    changeToNextPage(event: any) {\r\n      this.logger.info('method [changeToNextPage] - START/END');\r\n      if (this.pageNumber < this.pageCount) {\r\n        this.pageNumber++;\r\n        this.onPageChanged(event, this.pageNumber);\r\n      }\r\n    }\r\n\r\n    changeToPreviousPage(event: any) {\r\n      this.logger.info('method [changeToNextPage] - START/END');\r\n      if (this.pageNumber > 1) {\r\n        this.pageNumber--;\r\n        this.onPageChanged(event, this.pageNumber);\r\n      }\r\n    }\r\n\r\n\r\n    changeToCurrentPage(event: any) {\r\n        this.logger.info('method [changeToCurrentPage] - START/END');\r\n        this.pageNumber = event.currentTarget.value;\r\n        if (this.pageNumber < 1) {\r\n             this.pageNumber = 1;\r\n        } else if (this.pageNumber > this.pageCount) {\r\n             this.pageNumber = this.pageCount;\r\n        }\r\n\r\n        this.onPageChanged(event, this.pageNumber);\r\n    }\r\n\r\n    onPageChanged(event?: Event, pageNumber?: number) {\r\n        this.logger.info('method [onPageChanged] - START/END', this.commonGrid);\r\n        this.commonGrid.processOnPaginationChanged(event, { newPage: pageNumber, pageSize: -1 });\r\n      }\r\n}\r\n","import { Component, OnInit, ViewChild, ModuleWithProviders, NgModule, ViewContainerRef, ComponentFactoryResolver, OnChanges, AfterContentInit, AfterViewChecked, ElementRef, Renderer, EventEmitter,\r\n    Output, AfterViewInit, Injectable} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport {SwtCommonGridComponent} from './swt-common-grid.component';\r\nimport {SwtCommonGridPaginationComponent} from './swt-common-grid-pagination.component';\r\nimport { FilterChangedArgs, PaginationChangedArgs, SortChangedArgs } from 'angular-slickgrid';\r\n\r\nimport { Logger } from './swt-logger.service';\r\n/**\r\n * Main test Component\r\n *\r\n * @author Saber Chebka, saber.chebka@gmail.com\r\n */\r\n@Component({\r\n  selector: 'swt-common-grid-test',\r\n  templateUrl: './swt-common-grid-test.component.html'\r\n})\r\n@Injectable()\r\nexport class SwtCommonGridTestComponent implements OnInit, AfterViewInit {\r\n    componentFactory: any;\r\n    testurl = 'http://127.0.0.1:8080/grid!display.do?';\r\n    currentUrl = this.testurl;\r\n\r\n    @ViewChild('commonGrid1') commonGrid: SwtCommonGridComponent;\r\n    @ViewChild('commonGridPag1') commonGridPag: SwtCommonGridPaginationComponent;\r\n\r\n    private logger: Logger = null;\r\n\r\n    constructor(private httpClient: HttpClient,\r\n            private viewContainerRef: ViewContainerRef,\r\n            private componentFactoryResolver: ComponentFactoryResolver) {\r\n        this.logger = new Logger('test', null);\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Link pagination component into the current Grid\r\n        if (this.commonGridPag) {\r\n            this.commonGrid.paginationComponent = this.commonGridPag;\r\n        }\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      this.logger.info('method [ngAfterViewInit] - START');\r\n\r\n      setTimeout(() => {\r\n        // Init datagrid example:\r\n        this.commonGridPag.processing = true;\r\n\r\n        // Real HTTP call\r\n        this.currentUrl = this.testurl + '&currentPage=1';\r\n        /*\r\n        this.httpClient.get(this.currentUrl).subscribe(\r\n            (data: any) => {\r\n                this.commonGrid.CustomGrid(data.suspectManagement.grid.metadata);\r\n                this.commonGrid.gridData = data.suspectManagement.grid.rows;\r\n                this.commonGridPag.pageCount = data.suspectManagement.singletons.maxpage;\r\n                this.commonGridPag.processing = false;\r\n            }\r\n        );\r\n        */\r\n        this.commonGrid.CustomGrid(data_sample.pagination_samples.grid.metadata);\r\n        this.commonGrid.gridData = data_sample.pagination_samples.grid.rows;\r\n        this.commonGridPag.pageCount = data_sample.pagination_samples.grid.rows.maxpage;\r\n\r\n        this.commonGridPag.processing = false;\r\n      }, 0);\r\n      this.logger.info('method [ngAfterViewInit] - END');\r\n    }\r\n\r\n    filterChanged(event: FilterChangedArgs) {\r\n        this.commonGridPag.processing = true;\r\n        this.updateGridData();\r\n    }\r\n\r\n    paginationChanged(event: PaginationChangedArgs) {\r\n        this.commonGridPag.processing = true;\r\n        this.updateGridData();\r\n    }\r\n\r\n    sortChanged(event: SortChangedArgs) {\r\n        this.commonGridPag.processing = true;\r\n        this.updateGridData();\r\n    }\r\n\r\n\r\n    updateGridData() {\r\n        this.currentUrl = this.testurl + '&currentPage=' + this.commonGrid.currentPage + '&selectedSort=' + this.commonGrid.sortedGridColumn + '&selectedFilter=' + this.commonGrid.filteredGridColumns;\r\n        // Real HTTP call\r\n        /*this.httpClient.get(this.currentUrl).subscribe(\r\n            (data: any) => {\r\n                this.commonGrid.gridData = data.suspectManagement?data.suspectManagement.grid.rows:[];\r\n                this.commonGridPag.pageCount = data.suspectManagement?data.suspectManagement.singletons.maxpage:1;\r\n                this.commonGridPag.processing = false;\r\n            }\r\n        );*/\r\n        setTimeout(() => {\r\n            this.commonGrid.gridData = data_sample.pagination_samples.grid.rows;\r\n            this.commonGridPag.pageCount = data_sample.pagination_samples.grid.rows.maxpage;\r\n        }, 750);\r\n    }\r\n}\r\n\r\n\r\nexport const data_sample = {\r\n    'pagination_samples': {\r\n        'grid': {\r\n            'metadata': {\r\n                'columns': {\r\n                    'column': [{\r\n                        'sort': true,\r\n                        'filterable': false,\r\n                        'width': 60,\r\n                        'dataelement': 'hasNote',\r\n                        'heading': 'Note'\r\n                    },\r\n                    {\r\n                        'sort': true,\r\n                        'filterable': true,\r\n                        'width': 125,\r\n                        'dataelement': 'status',\r\n                        'heading': 'Status'\r\n                    },\r\n                    {\r\n                        'sort': true,\r\n                        'visible': true,\r\n                        'filterable': true,\r\n                        'width': 125,\r\n                        'dataelement': 'currency',\r\n                        'heading': 'Currency'\r\n                    },\r\n                    {\r\n                        'sort': true,\r\n                        'visible': true,\r\n                        'filterable': true,\r\n                        'width': 125,\r\n                        'dataelement': 'amount',\r\n                        'heading': 'Amount'\r\n                    },\r\n                    {\r\n                        'sort': true,\r\n                        'visible': true,\r\n                        'filterable': true,\r\n                        'width': 125,\r\n                        'dataelement': 'inputDate',\r\n                        'heading': 'Input Date'\r\n                    },\r\n                    {\r\n                        'sort': true,\r\n                        'visible': true,\r\n                        'filterable': true,\r\n                        'width': 125,\r\n                        'dataelement': 'inputTime',\r\n                        'heading': 'Input Time'\r\n                    }]\r\n                }\r\n            },\r\n            'rows': {\r\n                'row': [{\r\n                    'currency': {\r\n                        'content': 'EUR'\r\n                    },\r\n                    'amount': {\r\n                        'content': '2 203 677,000'\r\n                    },\r\n                    'startTime': {\r\n                        'content': '06/19/2017 11:52:51'\r\n                    },\r\n                    'inputDate': {\r\n                        'content': '06/19/2017'\r\n                    },\r\n                    'status': {\r\n                        'content': 'New'\r\n                    },\r\n                    'inputTime': {\r\n                        'content': '11:52:51'\r\n                    },\r\n                    'hasNote': {\r\n                        'content': 'False'\r\n                    }\r\n                },\r\n                {\r\n                    'currency': {\r\n                        'content': 'USD'\r\n                    },\r\n                    'amount': {\r\n                        'content': '6 203 677,000'\r\n                    },\r\n                    'startTime': {\r\n                        'content': '06/28/2017 10:42:00'\r\n                    },\r\n                    'inputDate': {\r\n                        'content': '06/28/2017'\r\n                    },\r\n                    'status': {\r\n                        'content': 'New'\r\n                    },\r\n                    'inputTime': {\r\n                        'content': '10:40:12'\r\n                    },\r\n                    'hasNote': {\r\n                        'content': 'True'\r\n                    }\r\n                }\r\n                ],\r\n                'maxpage': 5\r\n            }\r\n        }\r\n    }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { GridAddItemComponent } from './examples/grid-additem.component';\r\nimport { GridMenuComponent } from './examples/grid-menu.component';\r\nimport { GridBasicComponent } from './examples/grid-basic.component';\r\nimport { GridClientSideComponent } from './examples/grid-clientside.component';\r\nimport { GridColspanComponent } from './examples/grid-colspan.component';\r\nimport { GridDraggableGroupingComponent } from './examples/grid-draggrouping.component';\r\nimport { GridEditorComponent } from './examples/grid-editor.component';\r\nimport { GridFormatterComponent } from './examples/grid-formatter.component';\r\nimport { GridFrozenComponent } from './examples/grid-frozen.component';\r\nimport { GridGroupingComponent } from './examples/grid-grouping.component';\r\nimport { GridHeaderButtonComponent } from './examples/grid-headerbutton.component';\r\nimport { GridHeaderMenuComponent } from './examples/grid-headermenu.component';\r\nimport { GridLocalizationComponent } from './examples/grid-localization.component';\r\nimport { GridOdataComponent } from './examples/grid-odata.component';\r\nimport { GridGraphqlComponent } from './examples/grid-graphql.component';\r\nimport { GridRemoteComponent } from './examples/grid-remote.component';\r\nimport { GridRowMoveComponent } from './examples/grid-rowmove.component';\r\nimport { GridRowSelectionComponent } from './examples/grid-rowselection.component';\r\nimport { GridStateComponent } from './examples/grid-state.component';\r\nimport { HomeComponent } from './examples/home.component';\r\nimport { SwtCommonGridTestComponent } from './examples/swt-common-grid-test.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'additem', component: GridAddItemComponent },\r\n  { path: 'basic', component: GridBasicComponent },\r\n  { path: 'colspan', component: GridColspanComponent },\r\n  { path: 'editor', component: GridEditorComponent },\r\n  { path: 'formatter', component: GridFormatterComponent },\r\n  { path: 'frozen', component: GridFrozenComponent },\r\n  { path: 'headerbutton', component: GridHeaderButtonComponent },\r\n  { path: 'headermenu', component: GridHeaderMenuComponent },\r\n  { path: 'gridgraphql', component: GridGraphqlComponent },\r\n  { path: 'gridmenu', component: GridMenuComponent },\r\n  { path: 'gridstate', component: GridStateComponent },\r\n  { path: 'draggrouping', component: GridDraggableGroupingComponent },\r\n  { path: 'grouping', component: GridGroupingComponent },\r\n  { path: 'localization', component: GridLocalizationComponent },\r\n  { path: 'clientside', component: GridClientSideComponent },\r\n  { path: 'odata', component: GridOdataComponent },\r\n  { path: 'remote', component: GridRemoteComponent },\r\n  { path: 'rowmove', component: GridRowMoveComponent },\r\n  { path: 'selection', component: GridRowSelectionComponent },\r\n  { path: 'swt', component: SwtCommonGridTestComponent },\r\n  { path: '', redirectTo: '/basic', pathMatch: 'full' },\r\n  { path: '**', redirectTo: '/basic', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'Angular-Slickgrid';\r\n}\r\n","import { AppRoutingRoutingModule } from './app-routing.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { GridAddItemComponent } from './examples/grid-additem.component';\r\nimport { GridBasicComponent } from './examples/grid-basic.component';\r\nimport { GridClientSideComponent } from './examples/grid-clientside.component';\r\nimport { GridColspanComponent } from './examples/grid-colspan.component';\r\nimport { GridDraggableGroupingComponent } from './examples/grid-draggrouping.component';\r\nimport { GridEditorComponent } from './examples/grid-editor.component';\r\nimport { GridFormatterComponent } from './examples/grid-formatter.component';\r\nimport { GridFrozenComponent } from './examples/grid-frozen.component';\r\nimport { GridGraphqlComponent } from './examples/grid-graphql.component';\r\nimport { GridGroupingComponent } from './examples/grid-grouping.component';\r\nimport { GridHeaderMenuComponent } from './examples/grid-headermenu.component';\r\nimport { GridHeaderButtonComponent } from './examples/grid-headerbutton.component';\r\nimport { GridLocalizationComponent } from './examples/grid-localization.component';\r\nimport { GridMenuComponent } from './examples/grid-menu.component';\r\nimport { GridOdataComponent } from './examples/grid-odata.component';\r\nimport { GridRemoteComponent } from './examples/grid-remote.component';\r\nimport { GridRowMoveComponent } from './examples/grid-rowmove.component';\r\nimport { GridRowSelectionComponent } from './examples/grid-rowselection.component';\r\nimport { GridStateComponent } from './examples/grid-state.component';\r\nimport { HomeComponent } from './examples/home.component';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { Injector, APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { LOCATION_INITIALIZED } from '@angular/common';\r\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\nimport { SwtCommonGridTestComponent } from './examples/swt-common-grid-test.component';\r\nimport { SwtCommonGridPaginationComponent } from './examples/swt-common-grid-pagination.component';\r\nimport { SwtCommonGridComponent } from './examples/swt-common-grid.component';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AngularSlickgridModule } from 'angular-slickgrid';\r\n\r\n// AoT requires an exported function for factories\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n// use an Initializer Factory as describe here: https://github.com/ngx-translate/core/issues/517#issuecomment-299637956\r\nexport function appInitializerFactory(translate: TranslateService, injector: Injector) {\r\n  return () => new Promise<any>((resolve: any) => {\r\n    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\r\n    locationInitialized.then(() => {\r\n      const langToSet = 'en';\r\n      translate.setDefaultLang('en');\r\n      translate.use(langToSet).subscribe(() => {\r\n        // console.info(`Successfully initialized '${langToSet}' language.'`);\r\n      }, err => {\r\n        console.error(`Problem with '${langToSet}' language initialization.'`);\r\n      }, () => {\r\n        resolve(null);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n// @dynamic\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GridAddItemComponent,\r\n    GridBasicComponent,\r\n    GridClientSideComponent,\r\n    GridColspanComponent,\r\n    GridEditorComponent,\r\n    GridDraggableGroupingComponent,\r\n    GridFormatterComponent,\r\n    GridFrozenComponent,\r\n    GridGraphqlComponent,\r\n    GridGroupingComponent,\r\n    GridHeaderButtonComponent,\r\n    GridHeaderMenuComponent,\r\n    GridLocalizationComponent,\r\n    GridMenuComponent,\r\n    GridOdataComponent,\r\n    GridRemoteComponent,\r\n    GridRowMoveComponent,\r\n    GridRowSelectionComponent,\r\n    GridStateComponent,\r\n    SwtCommonGridTestComponent,\r\n    SwtCommonGridPaginationComponent,\r\n    SwtCommonGridComponent,\r\n    HomeComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingRoutingModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    AngularSlickgridModule.forRoot({\r\n      // add any Global Grid Options/Config you might want\r\n      // to avoid passing the same options over and over in each grids of your App\r\n      enableAutoResize: true,\r\n      autoResize: {\r\n        containerId: 'demo-container',\r\n        sidePadding: 15\r\n      }\r\n    })\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: appInitializerFactory,\r\n      deps: [TranslateService, Injector],\r\n      multi: true\r\n    }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule, { preserveWhitespaces: true }) // preserveWhitespaces is now default to False since Angular 6\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}